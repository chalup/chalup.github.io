<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Qt | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/qt/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-09-28T23:58:39+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introducing: Merry Cook]]></title>
    <link href="http://chalup.github.io/blog/2013/08/19/introducing-merry-cook/"/>
    <updated>2013-08-19T21:10:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/08/19/introducing-merry-cook</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/ss3.png"></p>

<p>After a long hiatus since November 2011 I have released another clone of classic Russian handheld game from the &lsquo;80s &ndash; Merry Cook. I knew that the &ldquo;Nu, Pogodi!&rdquo; code wasn&rsquo;t my top achievement, and I had to force myself into diving into it, but I feel it was worth it. Few things I think I did right this time:</p>

<ul>
<li><strong>Do not keep <em>any</em> game logic in QML</strong>. Qt has an excellent state machine framework, which makes writing the game logic in C++ relatively easy.</li>
<li><strong>Keep the QML/C++ interface as simple as possible</strong>. Send signals from QML to C++ when user takes some action and update the QML UI from the C++ side by changing QProperties on some context property object. I&rsquo;ve actually used two objects for that, because it made testing a bit easier.</li>
<li><strong>Unit tests</strong>. I&rsquo;ve set up the testing harness using gmock/gtest and I&rsquo;ve used it to unit test some things. I probably would have been fine without them, since Merry Cook is a very simple but a) it forced me to divide stuff into more manageable classes and b) it gave me a sense of accomplishing something early. It&rsquo;s funny, because even though I&rsquo;m absolutely conscious of the latter fact, I think it gave me enough boost to get to the point where I had moved forward with implementation and polishing, because I really wanted to publish this game.</li>
<li><strong>QProperty helper</strong>. I wrote an abominable macro for reducing the QProperty boilerplate:</li>
</ul>


<script src="https://gist.github.com/chalup/6267728.js"></script>


<p></li></p>

<p>Things still on my TODO list:</p>

<ul>
<li><strong>More tests</strong>. Besides unit tests I&rsquo;d also like to write some integration tests for the state machine setup and connections, but I didn&rsquo;t have time to think how this should be done without making too much state public just for testing. Maybe next time.</li>
<li><strong>Refactor &ldquo;Nu, Pogodi!&rdquo;</strong>. I jumped straight into new project, but I should have started with refactoring the old crap. On the other hand, it might have sucked out all the motivation out of me, and had I done it, I wouldn&rsquo;t have been writing this post right now. So, maybe next time.</li>
<li><strong>Passing enums to QML</strong>. I have no idea what I did wrong, but I couldn&rsquo;t get the QML to see my C++ enums. I&rsquo;ve resorted to passing them as simple ints and using magic numbers on QML side, but it&rsquo;s definitely something I should fix. Obviously not now, but next time.</li>
</ul>


<p>Anyways, I&rsquo;m really happy with the final results, especially with the gameplay experience, which I think mimics the original game very well. Try it yourself!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screensaver Blocking on Symbian]]></title>
    <link href="http://chalup.github.io/blog/2012/10/03/screensaver-blocking-on-symbian/"/>
    <updated>2012-10-03T20:55:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/10/03/screensaver-blocking-on-symbian</id>
    <content type="html"><![CDATA[<p>In my <a href="http://store.ovi.com/content/318428">latest game</a> the players spend significant amount of time just watching the screen and trying to figure the puzzle out. The first few levels are obvious and most players will sole them in a few seconds, but as the difficulty of the puzzles increases the players stare at the screen longer and longer. At some point the screensaver would kick in and piss the player off (fortunately my ragtag QA/betatester team found this issue before launch).</p>

<p><a href="https://www.google.com/search?q=how+to+block+screensaver+symbian+qt">Google search results</a> are (as usual) helpful, but the most promising lead, the <a href="http://doc.qt.digia.com/qtmobility/qsystemscreensaver.html"><code>QSystemScreenSaver</code></a> class is not a solution. There are three problems with it:</p>

<ol>
<li>The API of the class itself is terrible.</li>
<li>The API of the <a href="http://doc.qt.digia.com/qtmobility/qml-screensaver.html">related QML element</a> is even worse.</li>
<li>Last, but not least, it doesn&rsquo;t work (at least not in the Qt Mobility version shipped with the Qt SDK).</li>
</ol>


<p>(BTW: these three points sums up pretty much every experience with Qt Mobility package I had. Qt devs should either kill this festering boil with fire or fix it and rename it, because I learned to dread everything remotely related to Qt Mobility, and I suspect I&rsquo;m not the only one).</p>

<p>Anyways, let&rsquo;s get back to the core of the problem, i.e. &ldquo;how to block the screensaver&rdquo;. Qt Mobility failed, but the task doesn&rsquo;t seems like a rocket science to me. <a href="https://www.google.com/search?q=how+to+block+screensaver+s60+c%2B%2B">Slightly different Google search</a> suggested using native Symbian&rsquo;s <a href="http://library.developer.nokia.com/topic/Nokia_Belle_Developers_Library/GUID-C6E5F800-0637-419E-8FE5-1EBB40E725AA/GUID-C197C9A7-EA05-3F24-9854-542E984C612D.html#GUID-A98E1B31-00E0-3DF1-8D5A-8E815B073D81"><code>User::ResetInactivityTime()</code></a> method. Few minutes and one <code>QTimer</code> later, everything worked:</p>

<p>``` c++</p>

<h1>ifndef SCREENSAVERBLOCKER_H</h1>

<h1>define SCREENSAVERBLOCKER_H</h1>

<h1>include <QObject></h1>

<h1>include <QApplication></h1>

<h1>include <QTimer></h1>

<p>class ScreenSaverBlocker : public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>public:</p>

<pre><code>explicit ScreenSaverBlocker(QObject *parent = 0) : QObject(parent) {
    mTimer.setInterval(1000);
    connect(&amp;mTimer, SIGNAL(timeout()), this, SLOT(blockScreenSaver()));
    changeScreenSaverState(QApplication::activeWindow() != 0);
    if (qApp) {
        qApp-&gt;installEventFilter(this);
    }
}

void changeScreenSaverState(bool blockScreenSaver) {
    if (blockScreenSaver &amp;&amp; !mTimer.isActive()) {
        mTimer.start();
    } else {
        mTimer.stop();
    }
}
</code></pre>

<p>protected:</p>

<pre><code>bool eventFilter(QObject *obj, QEvent *event) {
    Q_UNUSED(obj)
    if (event-&gt;type() == QEvent::ApplicationActivate
     || event-&gt;type() == QEvent::ApplicationDeactivate) {
        changeScreenSaverState(event-&gt;type() == QEvent::ApplicationActivate);
    }
    return false;
}
</code></pre>

<p>private slots:</p>

<pre><code>void blockScreenSaver() {
</code></pre>

<h1>ifdef Q_OS_SYMBIAN</h1>

<pre><code>    User::ResetInactivityTime();
</code></pre>

<h1>endif</h1>

<pre><code>}
</code></pre>

<p>private:</p>

<pre><code>QTimer mTimer;
</code></pre>

<p>};</p>

<h1>endif // SCREENSAVERBLOCKER_H</h1>

<p>```</p>

<p>The important thing in the code above is watching the <code>ApplicationActivate</code> and <code>ApplicationDeactivate</code> events &ndash; after all, when your app is in background, you shouldn&rsquo;t affect the phone behavior. I&rsquo;m not sure if the app would fail the Nokia&rsquo;s QA process without this feature, but it seemed prudent to write the code this way.</p>

<p>If you want to use this object in your QML UI just register it with <a href="http://doc.qt.digia.com/4.7/qdeclarativeengine.html#qmlRegisterType"><code>qmlRegisterType</code></a> and add the registered import and QML element to your root element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screen Orientation and QT Applications on Symbian Belle]]></title>
    <link href="http://chalup.github.io/blog/2012/09/12/screen-orientation-and-qt-applications/"/>
    <updated>2012-09-12T22:05:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/09/12/screen-orientation-and-qt-applications</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s take a break from <a href="/blog/2012/08/30/custom-scrollbar-graphics-in-android">Android</a> <a href="/blog/2012/09/05/android-sharedpreferences-gotcha">gotchas</a> and do some mobile necrophilia, i.e. let&rsquo;s talk about Symbian.</p>

<p>Recently I received an email from Nokians saying that they are testing Nokia Store content with new firmware update and <a href="http://store.ovi.com/content/219800">my app</a> won&rsquo;t work after update. After few quick email exchanges we narrowed down the problem to <a href="/blog/2012/05/30/qml-applications-on-nokia-belle">screen orientation locking code I wrote about some time ago</a>. It turns out that things can be done much simpler:</p>

<p>``` js
Window {</p>

<pre><code>Rectangle {
    id: root
    anchors.fill: parent

    Component.onCompleted: {
        screen.allowedOrientations = Screen.Landscape
    }

    // more stuff
}
</code></pre>

<p>}
```</p>

<p>``` c++
int main(int argc, char *argv[])
{</p>

<pre><code>QScopedPointer&lt;QApplication&gt; app(createApplication(argc, argv));

QmlApplicationViewer viewer;
viewer.setMainQmlFile(QLatin1String("qml/nupagadi/GameArea.qml"));
viewer.setOrientation(QmlApplicationViewer::ScreenOrientationLockLandscape);
viewer.setResizeMode(QDeclarativeView::SizeRootObjectToView);
viewer.showExpanded();

return app-&gt;exec();
</code></pre>

<p>}
```</p>

<p>Less code, no need to comment it as a gotcha/workaround, and it&rsquo;s supposedly futureproof.</p>

<p>I&rsquo;m very positively surprised with Nokians' approach, responsiveness and this whole experience. Of course I wouldn&rsquo;t be me if I didn&rsquo;t bitch a little bit, namely: why did I have this problem in the first place? I mean, locking the screen orientation is not a rocket science and should be well documented. It should, but unfortunately it&rsquo;s not, like so many things about QML.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QML Applications on Nokia Belle]]></title>
    <link href="http://chalup.github.io/blog/2012/05/30/qml-applications-on-nokia-belle/"/>
    <updated>2012-05-30T20:06:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/05/30/qml-applications-on-nokia-belle</id>
    <content type="html"><![CDATA[<p>After the latest update of &ldquo;Nu, Pogodi!&rdquo;, I received few negative reviews saying that the game doesn&rsquo;t work. I&rsquo;ve tested the game thoroughly on all devices I was able to get my hands on, but I wasn&rsquo;t able to reproduce the error, so I decided to wait until I get more info. Few days ago with the help of one customer I was able to pin down the problem &ndash; the game failed to display any UI on new Belle firmware with Qt 4.8.0. I don&rsquo;t have such device myself, but fortunately the great <a href="http://www.developer.nokia.com/Devices/Remote_device_access/">Remote Device Access</a> service allows testing on Nokia 808 PureView with latest Belle firmware. I&rsquo;ve reproduced the error, wrote the Nokia Developers Support, and they sent me a very helpful link: <a href="http://www.developer.nokia.com/Community/Wiki/Changes_in_Symbian_Belle_and_Qt_4.7.4#Changes_in_Nokia_Belle_FP1">Changes in Nokia Belle FP1</a>. One issue listed there caught my eye:</p>

<p><blockquote><p>If application does not specify a size for the root QML object and doesn’t use the Qt components Window as root element (Window component should not be used as a child item), it might cause the root window not to be shown.</p></p><p><p><b>Solution / Workaround:</b><br/>Always declare a size for your custom QML root element.</p></blockquote></p>

<p>I&rsquo;ve checked my main QML file and indeed, I did not set the root element size, instead I&rsquo;ve set the resize mode to SizeRootObjectToView and maximized the QDeclarativeView. I think it&rsquo;s the better solution than setting the root element size explicitly, because the display resolution is not the same on all Nokia phones (I&rsquo;m looking at you, E6). Instead of doing that, I wrapped my entire UI into Window element from Qt Components and lo and behold, my game displayed something, although it wasn&rsquo;t exactly what I expected:</p>

<p><img class="center" src="/images/Nokia+808+PureView.png"></p>

<p>My code locked the screen orientation after loading main QML file, and it looked like the only thing that might cause this problem, so I changed the calls order. On Belle FP1 devices everything worked fine, but this change broke the display on devices with Anna and older Belle firmware:</p>

<p><img class="center" src="/images/Nokia+N8-00.png"></p>

<p>Wat? The only solution I came up with was creating the utility method for detecting version of Qt during runtime and locking screen orientation after and before loading main QML file, depending on the Qt version. Relevant piece of code:</p>

<p>``` c++
bool Utils::runtimeQtAtLeast(int major, int minor, int bugfix)
{</p>

<pre><code>const QStringList v = QString::fromAscii(qVersion()).split(QLatin1Char('.'));
if (v.count() == 3) {
    int runtimeVersion = v.at(0).toInt() &lt;&lt; 16 | v.at(1).toInt() &lt;&lt; 8 | v.at(2).toInt();
    int version = major &lt;&lt; 16 | minor &lt;&lt; 8 | bugfix;
    return version &lt;= runtimeVersion;
}
return false;
</code></pre>

<p>}</p>

<p>// &hellip;</p>

<p>const bool qt48 = Utils::runtimeQtAtLeast(4,8,0);
QmlApplicationViewer viewer;
if (qt48) {</p>

<pre><code>viewer.setOrientation(QmlApplicationViewer::ScreenOrientationLockLandscape);
viewer.setResizeMode(QDeclarativeView::SizeRootObjectToView);
</code></pre>

<p>}</p>

<p>viewer.setMainQmlFile(QLatin1String(&ldquo;qml/nupagadi/GameArea.qml&rdquo;));</p>

<p>if (!qt48) {</p>

<pre><code>viewer.setOrientation(QmlApplicationViewer::ScreenOrientationLockLandscape);
viewer.setResizeMode(QDeclarativeView::SizeRootObjectToView);
</code></pre>

<p>}
```</p>

<p>This kind of incompatibility between <strong>minor</strong> versions of the Qt framework is mind boggling. It makes me think what else did Nokia screw up in Qt 4.8.0 for Symbian and what will they screw up in the next firmware updates. One thing is sure: I&rsquo;ll have a lot of blogging material.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QML Error Handling Revisited]]></title>
    <link href="http://chalup.github.io/blog/2012/03/28/qml-error-handling-revisited/"/>
    <updated>2012-03-28T23:01:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/03/28/qml-error-handling-revisited</id>
    <content type="html"><![CDATA[<p>After releasing <a href="http://store.ovi.com/content/219800">Nu, Pogodi!</a> I learned the hard way that checking the QML runtime errors might be a good idea. For that particular application, simply checking the errors from <code>QDeclarativeView</code> after setting the main qml file was enough, because everything in qml file was statically declared. But what if you use <a href="https://qt-project.org/doc/qt-4.8/qml-loader.html">QML Loader</a> element, either explicitly or through some other qml element like <a href="http://doc.qt.nokia.com/qt-components-symbian/qml-pagestack.html">PageStack from Qt Components</a>, and something goes wrong?</p>

<p>Well, if you don&rsquo;t improve the error handling code, your application will silently fail in some places, which probably won&rsquo;t make the users happy. I didn&rsquo;t wanted to repeat the <a href="http://store.ovi.com/content/219800">Nu, Pogodi!</a> screw up when releasing <a href="http://store.ovi.com/content/262535">Word Judge</a>, so I&rsquo;ve created a better error handling solution. First part is an error handler class:</p>

<p>``` cpp
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
//  qmlerrorhandler.h
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>class QmlErrorHandler : public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>public:</p>

<pre><code>explicit QmlErrorHandler(QDeclarativeView &amp;view, QObject *parent = 0);
bool errorOccured() const;
</code></pre>

<p>private slots:</p>

<pre><code>void handleQmlStatusChange(QDeclarativeView::Status status);
void handleQmlErrors(const QList&lt;QDeclarativeError&gt;&amp; qmlErrors);
</code></pre>

<p>private:</p>

<pre><code>QDeclarativeView &amp;mView;
bool mErrorOccured;
</code></pre>

<p>};</p>

<p>// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;
//  qmlerrorhandler.cpp
// &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>QmlErrorHandler::QmlErrorHandler(QDeclarativeView &amp;view, QObject *parent) :</p>

<pre><code>QObject(parent),
mView(view),
mErrorOccured(false)
</code></pre>

<p>{</p>

<pre><code>connect(&amp;view, SIGNAL(statusChanged(QDeclarativeView::Status)), SLOT(handleQmlStatusChange(QDeclarativeView::Status)));
connect(view.engine(), SIGNAL(warnings(QList&lt;QDeclarativeError&gt;)), SLOT(handleQmlErrors(QList&lt;QDeclarativeError&gt;)));
</code></pre>

<p>}</p>

<p>void QmlErrorHandler::handleQmlStatusChange(QDeclarativeView::Status status)
{</p>

<pre><code>if (status == QDeclarativeView::Error) {
    handleQmlErrors(mView.errors());
}
</code></pre>

<p>}</p>

<p>void QmlErrorHandler::handleQmlErrors(const QList<QDeclarativeError>&amp; qmlErrors)
{</p>

<pre><code>QStringList errors;
foreach (const QDeclarativeError&amp; error, qmlErrors) {
    // Special case for bug in QtComponents 1.1
    // https://bugreports.qt-project.org/browse/QTCOMPONENTS-1217
    if (error.url().toString().endsWith("PageStackWindow.qml") &amp;&amp; error.line() == 70)
        continue;

    errors.append(error.toString());
}

if (errors.isEmpty())
    return;

mErrorOccured = true;

QMessageBox msgBox;
msgBox.setText("Uh oh, something went terribly wrong!");
msgBox.setInformativeText("We're sorry, but it seems there are some problems "
                          "with running our application on your phone. Please "
                          "send us the following information to help us resolve "
                          "this issue:\n\n") +
                          errors.join("\n"));
msgBox.exec();
qApp-&gt;exit(-1);
</code></pre>

<p>}</p>

<p>bool QmlErrorHandler::errorOccured() const
{</p>

<pre><code>return mErrorOccured;
</code></pre>

<p>}
```</p>

<p>And here&rsquo;s how I use it in my applications:</p>

<p>``` cpp
int main(int argc, char *argv[])
{</p>

<pre><code>QScopedPointer&lt;QApplication&gt; app(createApplication(argc, argv));

QScopedPointer&lt;QmlApplicationViewer&gt; viewer(QmlApplicationViewer::create());
QmlErrorHandler errorHandler(*viewer);
viewer-&gt;setMainQmlFile(QLatin1String("main.qml"));
viewer-&gt;showExpanded();

if (!errorHandler.errorOccured()) {
    return app-&gt;exec();
} else {
    return -1;
}
</code></pre>

<p>}
```</p>

<p>Basically we need to catch the runtime errors, which are emitted from <code>QDeclarativeEngine</code> in signal named for some unfathomable reason <code>warnings</code>. Checking the <code>errorOccured()</code> in <code>main()</code> is ugly, but the <code>qApp-&gt;exit()</code> doesn&rsquo;t work until the event loop in main is started and that&rsquo;s the first thing which came to my mind. Please leave a comment if you know a simpler solution.</p>

<p>Note the lines 46-49 in <code>QmlErrorHandler</code>: we&rsquo;re catching all warnings and the qt components are not completely free of them. I had to add a special case to prevent triggering the handler on every orientation change. If you stumble upon some other errors that should be ignored, please let me know.</p>
]]></content>
  </entry>
  
</feed>
