<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fragmentation | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/fragmentation/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-06-10T09:28:49+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[To Guava or Not to Guava?]]></title>
    <link href="http://chalup.github.io/blog/2013/12/27/to-guava-or-not-to-guava/"/>
    <updated>2013-12-27T12:10:00+01:00</updated>
    <id>http://chalup.github.io/blog/2013/12/27/to-guava-or-not-to-guava</id>
    <content type="html"><![CDATA[<p>I faced this dilemma recently, when I was preparing first release of <a href="https://github.com/chalup/cerberus">Cerberus</a> utility for Android. On one hand, in <a href="https://github.com/chalup/cerberus">Cerberus</a> I used a tiny subset of Guava features which can be trivially rewritten in vanilla Java in 15 minutes, so maybe I should not force Guava down peoples throat?  On the other hand I&rsquo;m a <a href="/blog/2013/09/21/guava-goodies">huge</a> <a href="/blog/2013/10/04/more-guava-goodies-abstractiterator">fan</a> of Guava and I think you should definitely use it in anything more complicated than &ldquo;Hello, world!&rdquo; tutorial, because it either reduces a boilerplate or replaces your handrolled utilities with better, faster and more thoroughly tested implementations.</p>

<p>The &ldquo;this library bloats my apk&rdquo; argument is moot, because you can easily set up the ProGuard configuration which only strips the unused code, without doing any expensive optimizations. It&rsquo;s a good idea, because the dex input will be smaller, which speeds up the build and the apk will be smaller, which reduces time required to upload and install the app on the device.</p>

<p>I found the problem though, which is a bit harder to solve. Modern versions of Guava use some <a href="http://developer.android.com/reference/java/util/NavigableSet.html">Java 1.6 APIs, which are available from API level 9</a>, so when you try to use it on Android 2.2 (API level 8), you&rsquo;ll get the <code>NoSuchMethodException</code> or some other unpleasant runtime error (side note: position #233 on my TODO list was a jar analyzer which finds this problem). <a href="/blog/2013/06/26/guava-and-minsdkversion">On Android 2.2 you&rsquo;re stuck with Guava 13.0.1.</a></p>

<p>This extends also to Guava as a library dependency. If one library supports Android 2.2 and older, it forces old version of Guava as dependency. And if another library depends on more recent version of Guava, you&rsquo;re basically screwed.</p>

<p>One conclusion you can draw from this blog post is that you shouldn&rsquo;t use Guava in your open source libraries to prevent dependency hell, but that&rsquo;s spilling the baby with the bathwater. The problem is not Guava or any other library, the problem are Java 1.6 methods missing from Android API level 8! <a href="http://developer.android.com/about/dashboards/index.html">The statistics from Google</a> indicates that Froyo is used by 1.6%, in case of Base CRM user base it&rsquo;s only 0.2%. So more reasonable course of action is finally <strong>bumping minSdkVersion to 10</strong> (<a href="http://dannyroa.com/2013/10/17/why-its-time-to-support-only-android-4-0-and-above/">or even 14</a>), both for your applications and all the libraries.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android SharedPreferences Gotcha]]></title>
    <link href="http://chalup.github.io/blog/2012/09/05/android-sharedpreferences-gotcha/"/>
    <updated>2012-09-05T22:26:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/09/05/android-sharedpreferences-gotcha</id>
    <content type="html"><![CDATA[<p>I have another gotcha for you. Can you tell what&rsquo;s wrong with the following code?</p>

<p>``` java
public class MyFragment extends Fragment implements OnSharedPreferenceChangeListener {
  private TextView mInfo;
  private SharedPreferences mPreferences;</p>

<p>  public static final String INFO_SP_KEY = &ldquo;info&rdquo;;</p>

<p>  @Override
  public View onCreateView(LayoutInflater inflater, ViewGroup container,</p>

<pre><code>  Bundle savedInstanceState) {
return inflater.inflate(R.layout.my_fragment, container, false);
</code></pre>

<p>  }</p>

<p>  @Override
  public void onViewCreated(View view, Bundle savedInstanceState) {</p>

<pre><code>super.onViewCreated(view, savedInstanceState);
mInfo = (TextView) view.findViewById(R.id.info);
</code></pre>

<p>  }</p>

<p>  @Override
  public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, String key) {</p>

<pre><code>if (key.equals(INFO_SP_KEY)) {
  updateInfo();
}
</code></pre>

<p>  }</p>

<p>  @Override
  public void onActivityCreated(Bundle savedInstanceState) {</p>

<pre><code>super.onActivityCreated(savedInstanceState);
mPreferences = PreferenceManager.getDefaultSharedPreferences(getActivity());
</code></pre>

<p>  }</p>

<p>  @Override
  public void onPause() {</p>

<pre><code>super.onPause();
mPreferences.unregisterOnSharedPreferenceChangeListener(this);
</code></pre>

<p>  }</p>

<p>  @Override
  public void onResume() {</p>

<pre><code>super.onResume();
mPreferences.registerOnSharedPreferenceChangeListener(this);
updateInfo();
</code></pre>

<p>  }</p>

<p>  protected void updateInfo() {</p>

<pre><code>mInfo.setText(getString(R.string.info_text, mPreferences.getInt(INFO_SP_KEY, 0)));
</code></pre>

<p>  }
}
```</p>

<p>At first glance everything looks fine and in most cases it will work fine as well. However, if you a) set android:minSdkVersion to 8 or lower and b) change the shared preference from another thread (IntentService, SyncAdapter, etc.), you&rsquo;ll get the following crash:</p>

<p><code>
09-05 07:16:58.993: E/AndroidRuntime(403): android.view.ViewRoot$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.ViewRoot.checkThread(ViewRoot.java:2802)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.ViewRoot.requestLayout(ViewRoot.java:594)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.View.requestLayout(View.java:8125)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.View.requestLayout(View.java:8125)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.View.requestLayout(View.java:8125)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.View.requestLayout(View.java:8125)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.View.requestLayout(View.java:8125)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.View.requestLayout(View.java:8125)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.view.View.requestLayout(View.java:8125)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.widget.TextView.checkForRelayout(TextView.java:5378)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.widget.TextView.setText(TextView.java:2688)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.widget.TextView.setText(TextView.java:2556)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.widget.TextView.setText(TextView.java:2531)
09-05 07:16:58.993: E/AndroidRuntime(403): at com.porcupineprogrammer.sharedpreferencesgotcha.BaseFragment.updateButtonText(BaseFragment.java:65)
09-05 07:16:58.993: E/AndroidRuntime(403): at com.porcupineprogrammer.sharedpreferencesgotcha.WrongFragment.onSharedPreferenceChanged(WrongFragment.java:12)
09-05 07:16:58.993: E/AndroidRuntime(403): at android.app.ContextImpl$SharedPreferencesImpl$EditorImpl.commit(ContextImpl.java:2830)
09-05 07:16:58.993: E/AndroidRuntime(403): at com.porcupineprogrammer.sharedpreferencesgotcha.BaseFragment$1$1.run(BaseFragment.java:36)
09-05 07:16:58.993: E/AndroidRuntime(403): at java.lang.Thread.run(Thread.java:1096)
</code></p>

<p>Fortunately the obvious crashlog is obvious and you can solve this issue in about 5 seconds, by wrapping the UI action in <code>Activity.runOnUiThread()</code> method. Morbidly curious may track the root cause of this issue in <a href="http://grepcode.com/file_/repository.grepcode.com/java/ext/com.google.android/android/2.2_r1.1/android/app/ContextImpl.java/?v=diff&amp;id2=2.3_r1#3035">GrepCode</a>. <strong>Tl;dr</strong>: before Gingerbread the listeners are notified in the same thread as the <code>SharedPreferences.commit()</code> caller, in later releases <code>commit()</code> ensures the notifications are performed in UI thread.</p>

<p>Code of the sample application that demonstrates this issue is <a href="https://github.com/chalup/blog-sharedpreferences-gotcha">available on my github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Scrollbar Graphics in Android]]></title>
    <link href="http://chalup.github.io/blog/2012/08/30/custom-scrollbar-graphics-in-android/"/>
    <updated>2012-08-30T16:04:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/08/30/custom-scrollbar-graphics-in-android</id>
    <content type="html"><![CDATA[<p>One of the UI elements you might want to customize in your app are scrollbars for ListViews, ScrollViews and other scrollable objects. It&rsquo;s a minor visual change, but it might give your app more consistent and polished look and feel, especially in case of the heavily branded UI.</p>

<p>Anyways, changing the default scrollbar style is dead simple &ndash; you just need to specify new drawables for the track and thumb in your style:</p>

<p>``` xml</p>



<p>```</p>

<p>Of course, there is a small gotcha (why else would I bother to write this blog post?). Let&rsquo;s say that you don&rsquo;t need to customize horizontal scrollbar, so you prepare only vertical 9-patches:</p>

<p><img class="center" src="/images/zoom_vertical.png"></p>

<p>On Ice Cream Sandwich everything looks fine, but on Gingerbread the graphics are not exactly what you want:</p>

<p><img class="center" src="/images/badstyle.png"></p>

<p>Quick <a href="https://www.google.pl/search?q=android+incorrect+custom+scrollbar+width">Google search</a> returned a <a href="http://stackoverflow.com/questions/3736768/android-scrollview-scrollbarsize">StackOverflow thread</a> with a description and link to <a href="http://code.google.com/p/android/issues/detail?id=14317">Android bug tracker</a>, but no full workaround. If you&rsquo;re too lazy to click on those links, on Gingerbread and earlier releases the View asks ScrollbarDrawable for the height of horizontal scrollbar and uses it as a horizontal scrollbar height and vertical scrollbar width. Let&rsquo;s modify our scrollbar graphics a bit:</p>

<p><img class="center" src="/images/zoomed_symmetric.png"></p>

<p>And apply it as both horizontal and vertical scrollbar.</p>

<p>``` xml</p>



<p>```</p>

<p>Lo and behold, it works!</p>

<p><img class="center" src="/images/goodstyle.png"></p>

<p>Note: in general case you probably want to create another graphics for horizontal scrollbar by rotating and flipping vertical scrollbar graphics. Our scrollbar graphics doesn&rsquo;t have any non-symmetric elements and I&rsquo;m lazy, so I used the same 9-patch for both scrollbars.</p>

<p>The code of the sample application can be found <a href="https://github.com/chalup/blog-scrollbargotcha">here</a>.</p>
]]></content>
  </entry>
  
</feed>
