<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SQLite | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/sqlite/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-06-03T22:44:32+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Offline Mode in Android Apps, Part 3 - Old Db Schemas]]></title>
    <link href="http://chalup.github.io/blog/2014/01/25/offline-mode-in-android-apps-part-3-old/"/>
    <updated>2014-01-25T11:43:00+01:00</updated>
    <id>http://chalup.github.io/blog/2014/01/25/offline-mode-in-android-apps-part-3-old</id>
    <content type="html"><![CDATA[<p>The <a href="/blog/2013/12/26/offline-mode-in-android-apps-part-1">first post in this series</a> explained the first consequence on implementing the offline mode &ndash; performing the data migrations. In <a href="/blog/2014/01/03/offline-mode-in-android-apps-part-2">second part</a> I showed a workaround for the rudimentary SQLite&rsquo;s ALTER TABLE syntax. If you have checked the link to <a href="https://github.com/futuresimple/android-schema-utils/blob/master/src/main/java/com/getbase/android/schema/MigrationsHelper.java"><code>MigrationHelper</code></a> class I mentioned, you migth have noticed that it&rsquo;s just a tiny part of a <a href="https://github.com/futuresimple/android-schema-utils">larger library</a>, which allows you to define database schemas. Note the plural &ldquo;schemas&rdquo;: the whole point of this library is defining both current schema and the schemas for the older versions of your app. This post explains why do you have to do this.</p>

<p>Let&rsquo;s say in the first version you have the following data structure:</p>

<p><code>java
public static class User {
  public long id;
  public String firstName;
  public String lastName;
  public String email;
}
</code></p>

<p>And the table definition for this table in your <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html"><code>SQLiteOpenHelper</code></a> looks like this:</p>

<p>``` java
private static final String CREATE_TABLE_USERS = &ldquo;CREATE TABLE &rdquo; +</p>

<pre><code>TABLE_USERS +
" ( " +
ID + " INTEGER PRIMARY KEY AUTOINCREMENT " + ", " +
FIRST_NAME + " TEXT " + ", " +
LAST_NAME + " TEXT " + ", " +
EMAIL + " TEXT " +
" ) ";
</code></pre>

<p>```</p>

<p>In the next version you decide to keep only the first name in a single field, so you change your data structure accordingly and perform the data migration. In the snippet below I used the <code>MigrationHelper</code>, but you might have as well performed the migration by hand:</p>

<p>``` java
private static final String CREATE_TABLE_USERS = &ldquo;CREATE TABLE &rdquo; +</p>

<pre><code>TABLE_USERS +
" ( " +
ID + " INTEGER PRIMARY KEY AUTOINCREMENT " + ", " +
NAME + " TEXT " + ", " +
EMAIL + " TEXT " +
" ) ";
</code></pre>

<p>@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
  MigrationsHelper helper = new MigrationsHelper();
  if (oldVersion &lt; 2) {</p>

<pre><code>helper.performMigrations(db, 
    TableMigration.of(TABLE_USERS)
        .to(CREATE_TABLE_USERS)
        .withMapping(NAME, FIRST_NAME)
        .build()
);
</code></pre>

<p>  }
}
```</p>

<p>Then you decide that the email field should be mandatory, so you change the schema and migrate the data again:</p>

<p>``` java
private static final String CREATE_TABLE_USERS = &ldquo;CREATE TABLE &rdquo; +</p>

<pre><code>TABLE_USERS +
" ( " +
ID + " INTEGER PRIMARY KEY AUTOINCREMENT " + ", " +
NAME + " TEXT " + ", " +
EMAIL + " TEXT NOT NULL" +
" ) ";
</code></pre>

<p>@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
  MigrationsHelper helper = new MigrationsHelper();
  if (oldVersion &lt; 2) {</p>

<pre><code>helper.performMigrations(db,
    TableMigration.of(TABLE_USERS)
        .to(CREATE_TABLE_USERS)
        .withMapping(NAME, FIRST_NAME)
        .build()
);
</code></pre>

<p>  }
  if (oldVersion &lt; 3) {</p>

<pre><code>db.execSQL("DELETE FROM " + TABLE_USERS + " WHERE " + EMAIL + " IS NULL");
helper.performMigrations(db,
    TableMigration.of(TABLE_USERS)
        .to(CREATE_TABLE_USERS)
        .build()
);
</code></pre>

<p>  }
}
```</p>

<p>The code looks fine, but you have just broken migrations from v1 to v3. If there is an user with a null email field, the app will crash in line 13 above. But why, shouldn&rsquo;t the email field in v2 schema be nullable? It should, but this migration uses the constant containing the latest schema definition with different column constraint.</p>

<p>The worst thing about this kind of bugs is that it might slip through your tests, because the crash happens only if you have a specific data before the application update.</p>

<p>You migth be tempted to define separate migrations from every old version to the latest one (in our case migrations from v1 to v3 and from v2 to v3) and always execute only single migration, but this workaround doesn&rsquo;t scale. For each new migration you&rsquo;d have to check and potentially update every existing migration. When you publish the app twice a month, this quickly becomes a huge problem.</p>

<p>The other solution is to make every migration completely independent from the others, and execute them sequentially. This way, when you define a new migration, you don&rsquo;t have to worry about the previous ones. This means that when you upgrade from v1 to v3, you first upgrade from v1 to v2 and then from v2 to v2 and after the first step the database should be in the same state it were, when the v2 was the latest version. In other words, you have to keep an old database schemas.</p>

<p>As usual there are multiple ways to do this. You can copy the schema definition to another constant and append &ldquo;ver#&rdquo; suffix, but it means there will be a lot of duplicated code (although this code should never, ever change, so it&rsquo;s not as bad as the regular case of copypaste). The other way is to keep the initial database state and all the schema updates. The issue here is that you don&rsquo;t have a place in your code with current schema definition. The opposite solution is to keep the current schema and the list of downgrades. Sounds counterintuitive? Don&rsquo;t worry, that&rsquo;s because it <strong><em>is</em></strong> counterintuitive.</p>

<p>In <a href="https://github.com/futuresimple/android-schema-utils">android-schema-utils</a> I&rsquo;ve chosen the third approach, because in the long run it processes less data than the upgrades solution &ndash; in case of upgrade from vN-1 to vN it has to generate only 1 additional schema instead of N-1 schemas. I&rsquo;m still not sure if the code wouldn&rsquo;t be clearer had I went with duplicated schema definitions approach, but the current approach, once you get used to it, works fine. The schema and migrations for our example would look like this:</p>

<p>``` java
private static final MigrationsHelper MIGRATIONS_HELPER = new MigrationsHelper();
private static final Schemas SCHEMAS = Schemas.Builder</p>

<pre><code>.currentSchema(3,
    new TableDefinition(TABLE_USERS,
        new AddColumn(ID, "INTEGER PRIMARY KEY AUTOINCREMENT"),
        new AddColumn(NAME, "TEXT"),
        new AddColumn(EMAIL, "TEXT NOT NULL")
    )
)
.upgradeTo(3,
    new SimpleMigration() {
      @Override
      public void apply(SQLiteDatabase db, Schema schema) {
        db.execSQL("DELETE FROM " + TABLE_USERS + " WHERE " + EMAIL + " IS NULL");
      }
    },
    auto()
)
.downgradeTo(2,
    new TableDowngrade(TABLE_USERS, new AddColumn(EMAIL, "TEXT"))
)
.upgradeTo(2,
    SimpleTableMigration.of(TABLE_USERS)
        .withMapping(NAME, FIRST_NAME)
        .using(MIGRATIONS_HELPER)
    )
.downgradeTo(1,
    new TableDowngrade(TABLE_USERS,
        new AddColumn(FIRST_NAME, "TEXT"),
        new AddColumn(LAST_NAME, "TEXT"),
        new DropColumn(EMAIL)
    )
)
.build();
</code></pre>

<p>```</p>

<p>There are other benefits of keeping the old schemas in a more reasonable format than raw strings. Most of the schema migrations can be deducted from comparing subsequent schema versions, so you don&rsquo;t have to do it yourself. For example in migration from v2 to v3 I didn&rsquo;t have to specify that I want to migrate the Users table &ndash; the <code>auto()</code> migration automatically handles it. If the <code>auto()</code> is the only migration for a given upgrade, you can skip the whole <code>upgradeTo()</code> block. In our case that covered about 50% migrations, but YMMV.</p>

<p>If you go this way, your <code>onUpgrade</code> method, which usually is the most complex part of <code>SQLiteOpenHelper</code>, can be reduced to this:
<code>java
@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
  SCHEMAS.upgrade(oldVersion, mContext, db);
}
</code></p>

<p>This part concludes the &ldquo;offline mode&rdquo; series. Here&rsquo;s the short recap:</p>

<ul>
<li>If you don&rsquo;t want to compromise on UX, your application should work regardless whether the user is connected to internet or not.</li>
<li>In this case the user may end up in a situation when the application is upgraded, but not all data is synced with the server yet. You <strong><em>do not</em></strong> want to lose your users' data. You&rsquo;ll have to migrate them.</li>
<li>If you migrate your data, you should keep the migrations separate from one another, because otherwise maintaining them becomes a nightmare.</li>
<li>The best way to do this that I know of, is keeping the old schemas and always performing all migrations sequentially. To make things simpler, I recommend the <a href="https://github.com/futuresimple/android-schema-utils">android-schema-utils library</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android SQLiteDatabase Gotcha]]></title>
    <link href="http://chalup.github.io/blog/2014/01/12/android-sqlitedatabase-gotcha/"/>
    <updated>2014-01-12T22:15:00+01:00</updated>
    <id>http://chalup.github.io/blog/2014/01/12/android-sqlitedatabase-gotcha</id>
    <content type="html"><![CDATA[<p>In my <a href="/blog/2014/01/03/offline-mode-in-android-apps-part-2">previous post</a> I mentioned a nasty <code>SQLiteDatabase</code> gotcha and recommended using the <code>MigrationHelper</code> utility I wrote. If you have checked this <a href="https://github.com/futuresimple/android-schema-utils/blob/master/src/main/java/com/getbase/android/schema/MigrationsHelper.java">class&rsquo;s sources</a>, you might have noticed a weird code. Before getting the list of columns the table is renamed to the temporary name and then renamed back:</p>

<p>``` java
final String tempTable = &ldquo;tmp_&rdquo; + tempTableIndex++;
db.execSQL(&ldquo;ALTER TABLE &rdquo; + migration.tableName + &ldquo; RENAME TO &rdquo; + tempTable);
ImmutableSet<String> oldColumns = getColumns(db, tempTable);</p>

<p>db.execSQL(migration.createTableStatement);
final String tempNewTable = &ldquo;tmp_&rdquo; + tempTableIndex++;
db.execSQL(&ldquo;ALTER TABLE &rdquo; + migration.tableName + &ldquo; RENAME TO &rdquo; + tempNewTable);
ImmutableSet<String> newColumns = getColumns(db, tempNewTable);</p>

<p>db.execSQL(&ldquo;ALTER TABLE &rdquo; + tempNewTable + &ldquo; RENAME TO &rdquo; + migration.tableName);</p>

<p>private static ImmutableSet<String> getColumns(SQLiteDatabase db, String table) {
  Cursor cursor = db.query(table, null, null, null, null, null, null, &ldquo;0&rdquo;);
  if (cursor != null) {</p>

<pre><code>try {
  return ImmutableSet.copyOf(cursor.getColumnNames());
} finally {
  cursor.close();
}
</code></pre>

<p>  }
  return ImmutableSet.of();
}
```</p>

<p>Initially the <code>MigrationHelper</code>&rsquo;s code looked like this:</p>

<p>``` java
static final String TEMP_TABLE = &ldquo;tmp&rdquo;;
db.execSQL(&ldquo;ALTER TABLE &rdquo; + migration.tableName + &ldquo; RENAME TO &rdquo; + TEMP_TABLE);
ImmutableSet<String> oldColumns = getColumns(db, TEMP_TABLE);</p>

<p>db.execSQL(migration.createTableStatement);
ImmutableSet<String> newColumns = getColumns(db, migration.tableName);
```</p>

<p>It worked for a single migration, but didn&rsquo;t work for multiple migrations &ndash; the helper method for getting the column set always returned the columns of first table. Since the query was always the same, I suspected the results are cached somewhere. To verify this hypothesis I added to the temporary table name an index incremented with every migration. It worked, but then I realized I need to do the same for getting the columns of the new schema &ndash; otherwise the helper wouldn&rsquo;t work if the same table were migrated twice. This way the weird code was born.</p>

<p>But the same thing could happen outside of <code>MigrationHelper</code> operations, for example if you need to iterate through rows of the same table in two different migrations:</p>

<p>``` java
@Override
public void onUpgrade(final SQLiteDatabase db, int oldVersion, int newVersion) {
  if (oldVersion &lt;= 1500) {</p>

<pre><code>Cursor c = db.query("some_table", /* null, null, null... */);
// use Cursor c
</code></pre>

<p>  }</p>

<p>  // other migrations, including ones that change the some_table table&rsquo;s columns</p>

<p>  if (oldVersion &lt;= 2900) {</p>

<pre><code>Cursor c = db.query("some_table", /* null, null, null... */);
// try to use Cursor c and crash terribly
</code></pre>

<p>  }
}
```</p>

<p>So I checked the AOSP code for the suspected cache to see how the entries can be evicted or if the cache can be disabled. There are no methods for this, so you can&rsquo;t do it with straightforward call, but maybe you can exploit the implementation details?</p>

<p>On ICS the cache is implemented as <a href="http://developer.android.com/reference/android/util/LruCache.html"><code>LruCache</code></a>, so theoretically you could evict old entries by filling the cache with new ones, but there is one hiccup &ndash; you don&rsquo;t know the cache size, so you&rsquo;d always have to go with <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#MAX_SQL_CACHE_SIZE"><code>MAX_SQL_CACHE_SIZE</code></a>.</p>

<p>Before ICS you couldn&rsquo;t do even that &ndash; the implementation of this &ldquo;cache&rdquo; is just a fixed size buffer for <code>SQLiteStatements</code>. Once that buffer is full, no more statements are cached. This also has one more consequence &ndash; your app might work much slower on Android 2.x after upgrade from old version than after fresh install, because the db cache will be filled with queries used in migrations.</p>

<p>Fortunately the keys of this cache are raw SQL strings, so we can disable cache for migration queries by adding <code>WHERE n==n</code> clause with n incremented for every query (note that you musn&rsquo;t pass n as a bound parameter &ndash; the whole point of adding this selection is to make the queries different and force <code>SQLiteDatabase</code> to compile another statement).</p>

<p>The question you should ask yourself is why do I have to know and care about all this. Isn&rsquo;t SQLite smart enough to see that I&rsquo;m trying to access the database using prepared statement compiled against old schema? It turns out the SQLite detects this issues and raises <code>SQLITE_SCHEMA</code> error (commented with &ldquo;The database schema changed&rdquo;), but Android&rsquo;s <code>SQLiteDatabase</code> wrapper drops this error and happily uses the old, invalid statements. Bad Android.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Offline Mode in Android Apps, Part 2 - SQLite's ALTER TABLE]]></title>
    <link href="http://chalup.github.io/blog/2014/01/03/offline-mode-in-android-apps-part-2/"/>
    <updated>2014-01-03T20:29:00+01:00</updated>
    <id>http://chalup.github.io/blog/2014/01/03/offline-mode-in-android-apps-part-2</id>
    <content type="html"><![CDATA[<p>In <a href="/blog/2013/12/26/offline-mode-in-android-apps-part-1">first part of this series</a> I showed that to implement offline mode in your Android app you have to implement data migrations. If you&rsquo;re using SQLite database, it means you&rsquo;ll have to use (or rather work around) it&rsquo;s ALTER TABLE syntax:</p>

<p><a href="http://www.sqlite.org/images/syntax/alter-table-stmt.gif"><img class="center" src="http://www.sqlite.org/images/syntax/alter-table-stmt.gif"></a></p>

<p>So all you can do with it is adding the column or renaming the table, but in reality you probably need to alter a single column, remove column or change the table constraints. You can achieve this by doing the following operation:</p>

<ol>
<li>Rename the table T with old schema to old_T.</li>
<li>Create the table T with new schema.</li>
<li>Use &ldquo;INSERT INTO T (new_columns) SELECT old_columns FROM old_T&rdquo; query to populate the table T with the data from the renamed table old_T.</li>
<li>Drop old_T.</li>
</ol>


<p>Doing it manually is quite error prone though: for every migration you have to specify the new_columns and old_columns list. What&rsquo;s worse, in 95% of cases you just want to list the columns common for old and new schema. Fortunately we can automate such trivial migrations by executing <code>SELECT</code> with <code>LIMIT 0</code> (or <code>PRAGMA TABLE_INFO</code>) for both tables, getting the columns set using <a href="http://developer.android.com/reference/android/database/Cursor.html#getColumnNames%28%29"><code>Cursor.getColumnNames()</code></a>, and calculating these columns sets intersection.</p>

<p>You can write a nice wrapper for this yourself, but a) I already did it, so you don&rsquo;t have to and b) there is a <a href="/blog/2014/01/12/android-sqlitedatabase-gotcha">very nasty gotcha</a> which would probably cost you few hours of teeth grinding, so do yourself a favor and check <a href="https://github.com/futuresimple/android-schema-utils">this repository</a> out, especially the <a href="https://github.com/futuresimple/android-schema-utils/blob/master/src/main/java/com/getbase/android/schema/MigrationsHelper.java"><code>MigrationsHelper</code></a> class. It automates the trivial migrations and allows you to define a mappings for situations when you rename the column or add a non-nullable column in new schema.</p>

<p>In the next two posts I&rsquo;ll <a href="/blog/2014/01/12/android-sqlitedatabase-gotcha">describe the gotcha I&rsquo;ve mentioned</a> in the previous paragraph and show some other non-obvious consequences of doing data migrations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQLite Views Gotcha]]></title>
    <link href="http://chalup.github.io/blog/2013/12/03/sqlite-views-gotcha/"/>
    <updated>2013-12-03T00:13:00+01:00</updated>
    <id>http://chalup.github.io/blog/2013/12/03/sqlite-views-gotcha</id>
    <content type="html"><![CDATA[<p><strong>tl;dr:</strong> don&rsquo;t left join on view, or you gonna have a bad time.</p>

<p>I have investigated a performance issue of the db in Android app today. The symptoms looked like a classic case of the missing index: the performance degraded with adding more data to certain tables. However, the quick check of sqlite_master table and looking at some <code>EXPLAIN QUERY PLAN</code> queries indicated that everything is properly indexed (which is not very surprising, given that we use <a href="https://github.com/futuresimple/android-autoindexer">android-autoindexer</a>).</p>

<p>I started dumping the explain query plans for every query and it turned out that some queries perform multiple table scans instead of single scan of main table + indexed searches for joined tables. It means that the indices were in place, but they weren&rsquo;t used.</p>

<p>The common denominator of these queries was joining with a view. Here&rsquo;s the simplest schema which demonstrates the issue:</p>

<p>```
sqlite> create table x (id integer);
sqlite> create table y (id integer, x_id integer);</p>

<p>sqlite> explain query plan select * from x left join y on x.id = x_id;
selectid    order       from        detail</p>

<hr />

<p>0           0           0           SCAN TABLE x (~1000000 rows)
0           1           1           SEARCH TABLE y USING AUTOMATIC COVERING INDEX (x_id=?) (~7 rows)</p>

<p>sqlite> create view yyy as select * from y;</p>

<p>sqlite> explain query plan select * from x left join yyy on x.id = x_id;
selectid    order       from        detail</p>

<hr />

<p>1           0           0           SCAN TABLE y (~1000000 rows)
0           0           0           SCAN TABLE x (~1000000 rows)
0           1           1           SEARCH SUBQUERY 1 USING AUTOMATIC COVERING INDEX (x_id=?) (~7 rows)
```</p>

<p>Of course this behaviour is documented in the SQLite Query Planner overview (point 3 of the <a href="http://www.sqlite.org/optoverview.html#flattening">Subquery flattening</a> paragraph), and I even remember reading this docs few times, but I guess something like this has to bite me in the ass before I memorize it.</p>

<p>Everything works fine if you copypaste the views selection in place of the joined view, which makes me a sad panda, because I wish SQLite could do this for me. On the other hand it&rsquo;s a very simple workaround for this issue, and, with a right library, the code might even be manageable.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Injection Through ContentProvider Projection]]></title>
    <link href="http://chalup.github.io/blog/2013/11/06/sql-injection-through-contentprovider/"/>
    <updated>2013-11-06T23:45:00+01:00</updated>
    <id>http://chalup.github.io/blog/2013/11/06/sql-injection-through-contentprovider</id>
    <content type="html"><![CDATA[<p>The <a href="http://en.wikipedia.org/wiki/SQL_injection">SQL injection</a> through query parameters is the common security issue of any system using SQL database. Android is no different than any other system, so if you&rsquo;re using SQLite database in your Android app, you should always sanitize the database inputs.</p>

<p><a href="http://imgs.xkcd.com/comics/exploits_of_a_mom.png"><img class="center" src="http://imgs.xkcd.com/comics/exploits_of_a_mom.png" title="Obligatory XKCD" ></a></p>

<p>If you are also using an exported <a href="http://developer.android.com/reference/android/content/ContentProvider.html"><code>ContentProvider</code></a>, you need to take care of one more vector of attack: the projection parameter of the queries. Just like <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html"><code>SQLiteDatabase</code></a>, the <a href="http://developer.android.com/reference/android/content/ContentProvider.html"><code>ContentProvider</code></a> allows the users to specify which columns they want to retrieve. It makes sense, because it reduces the amount of data fetched, which might improve performance and reduce the RAM footprint of your app. Unlike the <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html"><code>SQLiteDatabase</code></a>, the <a href="http://developer.android.com/reference/android/content/ContentProvider.html"><code>ContentProvider</code></a> might be exported, which means that the external applications can query the data from it requesting an arbitrary projection, which are then turned into raw SQL queries. For example:</p>

<p><code>sql
'Bobby Tables was here'; DROP TABLE Students; --
* FROM sqlite_master; --
* FROM non_public_table_I_found_out_about_using_previous_query; --
</code></p>

<p>Basically it means that if you exposed a single uri without sanitizing the projection, you have exposed your entire db.</p>

<p>So how do you sanitize your projections? I&rsquo;ve given it some thought and it seems that the only sensible thing to do is allowing only subsets of predefined set of columns.</p>

<p>You cannot allow any expression, because you&rsquo;d allow any expressions, including SELECTs from other tables and allowing certain expressions is not a trivial task.</p>

<p>You shouldn&rsquo;t ignore the provided projection and return all columns, because one of the benefits of using projections is limiting the amount of data retrieved from database. Besides, <a href="https://play.google.com/store/apps/details?id=com.google.android.gm">certain widely used Google application</a> ignores the existence of <a href="http://developer.android.com/reference/android/database/Cursor.html#getColumnIndex%28java.lang.String%29"><code>Cursor.getColumnIndex</code></a> method and assumes that the columns will be returned in the same order they were specified in projection. The other app won&rsquo;t work correctly, and the users will probably blame you.</p>
]]></content>
  </entry>
  
</feed>
