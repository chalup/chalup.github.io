<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-09-26T20:38:06+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Shortest-lived Project Ever]]></title>
    <link href="http://chalup.github.io/blog/2014/09/04/my-shortest-lived-project-ever/"/>
    <updated>2014-09-04T21:11:06+02:00</updated>
    <id>http://chalup.github.io/blog/2014/09/04/my-shortest-lived-project-ever</id>
    <content type="html"><![CDATA[<p>Three weeks ago I wrote a <a href="https://github.com/chalup/proguard-please">proguard-please</a> plugin. I was super excited by this project because:</p>

<ol>
<li>It was a Gradle plugin, something I wanted to play with for quite some time</li>
<li>It was written in Groovy, a language I wanted to play with for quite some time</li>
<li>It solved a real issue with ProGuard configuration, which was pissing me off for quite some time</li>
</ol>


<h2>On configuring ProGuard</h2>

<p>If you&rsquo;re not familiar with ProGuard, here&rsquo;s the basic info: it&rsquo;s a program which prunes the unused code from your compiled Java program. It can also do other stuff like optimization or code obfuscation and repackaging to make the reverse engineering harder. Sounds good? The catch is that ProGuard sometimes cuts out or obfuscates too much code, which usually breaks the app, especially if you rely on reflection. The trick is to configure it correctly for each library you use, but it&rsquo;s not a trivial task.</p>

<p>The general idea for this plugin was to resolve the dependencies of your Android application and try to find the ProGuard configuration for every one of them. Of course the ProGuard config will not magically appear: the idea was to have a repository of configurations developed by the community.</p>

<h2>On Gradle</h2>

<p>First part of the project went really smooth, thanks to the <a href="http://www.gradle.org/docs/current/userguide/userguide.html">amazing documentation</a>. I didn&rsquo;t need to do any fancy stuff, so I was able to configure the basic scaffolding in no time at all. Docs for android gradle plugin are pretty much non-existent, but using the imported sources and <a href="https://bitbucket.org/hvisser/android-apt">android-apt</a> plugin by <a href="https://twitter.com/botteaap">Hugo Visser</a> as a base for Android related tasks I was able to get my plugin up and running.</p>

<h2>On Groovy</h2>

<p>I saw the Groovy for the first time at KrakDroid conference, when <a href="https://github.com/wojtekerbetowski">Wojciech Erbetowski</a> converted boring JUnit tests into <a href="https://github.com/Polidea/RoboSpock">RoboSpock</a> goodness. It looked nice, but when I started coding in Groovy, my love for this language faded.</p>

<p>There are lot of things I take for granted as a Java developer: amazing IDE, instant feedback when I screw something up and documentation for the code under my cursor at my fingertips. Maybe switching to Groovy, Ruby or Python requires some mindset change I haven&rsquo;t fully embraced, but I simply cannot imagine why would I switch to the language that effectively forces me to write my code in Notepad™.</p>

<p>I think the main problem I have with Groovy stems for the fact that there are some APIs that wouldn&rsquo;t typecheck in regular Java. Consider this code:</p>

<p>```groovy
if (!project.android[&ldquo;productFlavors&rdquo;].isEmpty()) {</p>

<pre><code>throw new ProjectConfigurationException("The build flavors are not supported yet", null)
</code></pre>

<p>}</p>

<p>def obfuscatedVariants = project.android[&ldquo;applicationVariants&rdquo;].findAll { v &ndash;> v.obfuscation != null }
```</p>

<p>It&rsquo;s a classic type of what I call &ldquo;string typing&rdquo;: depending on the key used in <code>project.android[]</code> access you get collection of objects of completely different type. As a consequence, the IDE cannot provide you with autocompletion or documentation for the collection contents.</p>

<p>Another example is the public API of Grgit library. Theoretically you can call <code>Grgit.clone(...)</code>, but there is no such method as <code>clone</code> in <code>Grgit</code> class, instead you have this code:</p>

<p>```groovy
class Grgit {</p>

<pre><code>private static final Map STATIC_OPERATIONS = [init: InitOp, clone: CloneOp]

static {
    Grgit.metaClass.static.methodMissing = { name, args -&gt;
        OpSyntaxUtil.tryOp(Grgit, STATIC_OPERATIONS, [] as Object[], name, args)
    }
}
</code></pre>

<p>} <br/>
```</p>

<p>I don&rsquo;t see what&rsquo;s wrong with the good ol' static method and what do you achieve by using <code>methodMissing</code> (besides confusing the IDE and breaking autocomplete/javadocs). Maybe I&rsquo;m just grupy old fart with brain eroded by too long exposure to Java, but Groovy is definitely not a language for me. I&rsquo;ll put up with it if I ever want to write another gradle plugin, but it&rsquo;s not going to be my go to language.</p>

<h2>What&rsquo;s up with the blog title?</h2>

<p>Few hours after publishing my project, another solution for ProGuard configuration appeared. It turns out, if you use gradle to build your library, you can configure <code>consumerProguardFiles</code> property to include in your aar package a ProGuard configuration that should be used by the users of your library. The logical next step is creating the library project containing only the ProGuard configuration for the most popular libraries out there. And that&rsquo;s exactly what <a href="https://bitbucket.org/littlerobots/squadleader">squadleader</a> project is.</p>

<p>It&rsquo;s not as flexible solution as my <a href="https://github.com/chalup/proguard-please">proguard-please</a> plugin, but it&rsquo;s much simpler, much easier to contribute to and the net effect is the same. In this light I chose to put my project on hold and redirect developers to squadleader page.</p>

<p>Despite of that, I&rsquo;m glad I worked on this project. I&rsquo;m very excited by the fact that you can easily build an useful tool that&rsquo;s incredibly easy to use. Using gradle for a new build system was a great call.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mobilization 2013]]></title>
    <link href="http://chalup.github.io/blog/2013/10/28/mobilization-2013/"/>
    <updated>2013-10-28T09:30:00+01:00</updated>
    <id>http://chalup.github.io/blog/2013/10/28/mobilization-2013</id>
    <content type="html"><![CDATA[<p>I gave the talk at the Mobilization 2013 conference this weekend. I have presented few libraries created at <a href="https://getbase.com/">Base CRM</a> to make the data model maintainable. Here are the slides:</p>

<script async="" class="speakerdeck-embed" data-id="c08beea021d4013102be12272eac3e5b" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<p>Besides giving the talk, I have attended few other very interesting talks: <a href="http://plus.google.com/101390418023034694144">+Wojtek Erbetowski</a> has shown the way they test Android apps at Polidea using <a href="https://github.com/Polidea/RoboSpock">RoboSpock</a>; <a href="http://plus.google.com/110384974108475906298">+Mateusz Grzechociński</a> introduced Android devs to new build system and shared an awesome gradle protip: use &mdash;daemon command line parameter to shave off few seconds from gradle startup. <a href="http://plus.google.com/108555637824110226040">+Mateusz Herych</a> described the <a href="https://github.com/square/dagger">Dagger</a> basics and warned about few pitfalls. Mieszko Lassota described some UI blunders not only from the programming world. Finally, Krzysztof Kocel and Paweł Urban summarised the security pitfalls.</p>

<p>All in all, this years Mobilization conference was a great place to be at. See you there next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle - First Impressions]]></title>
    <link href="http://chalup.github.io/blog/2013/08/18/gradle-first-impressions/"/>
    <updated>2013-08-18T22:36:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/08/18/gradle-first-impressions</id>
    <content type="html"><![CDATA[<p>Android Studio kept nagging me about make implementation deprecation, so I decided to try the new build system based on Gradle. At first I obviously hit the <a href="http://developer.android.com/sdk/installing/studio.html#Troubleshooting">missing Android Support Repository issue</a>, but after installing missing component in Android SDK Manager everything was created correctly (AFAIK the v0.2.3 of Android Studio doesn&rsquo;t have this issue anymore). On Mac I also had to set the ANDROID_HOME env variable to be able to build stuff from command line.</p>

<p>The app templates are a bit outdated, for example you might get rid of the libs/android-support-v4.jar, because gradle will anyways use the jar from aforementioned Android Support Repository. The build.gradle also references older support lib and build tools so you should probably bump it to the latest versions.</p>

<p>Adding the dependency to the local jar is trivially easy &ndash; we need just one line in dependencies section:</p>

<p><code>groovy
dependencies {
  compile files("libs/gson-2.2.4.jar")
}
</code></p>

<p>You can also define dependency to every jar in libs directory:</p>

<p><code>groovy
dependencies {
  compile fileTree(dir: 'libs', include: '*.jar')
}
</code></p>

<p>Using code annotation processors (like <a href="https://github.com/JakeWharton/butterknife">butterknife</a>) is also trivial:</p>

<p>``` groovy
repositories {
  mavenCentral()
}</p>

<p>dependencies {
  compile &lsquo;com.jakewharton:butterknife:2.0.1&rsquo;
}
```</p>

<p>The fist of the gradle&rsquo;s ugly warts is related to the native libs support. You can add the directory with *.so files, the build will succeed, but you&rsquo;ll get the runtime errors when your app will try to call native method. The workaround found on teh interwebs is to copy your native libs into the following directory structure:</p>

<p><code>
lib
lib/mips/*.so
lib/other_architectures/*.so
lib/x86/*.so
</code></p>

<p>NOTE: there is no typo, the top level directory should be a singular &ldquo;lib&rdquo;. Then you have to zip the whole thing, rename it to *.jar and include as a regular jar library. Lame, but does the trick.</p>

<p>Let&rsquo;s get back to the good parts. The list of the tasks returned by &ldquo;gradlew tasks&rdquo; command contains the installDebug task, but not the installRelease one. This happens, because there is no default apk signing configuration for release builds. The simplest workaround is to use the same configuration as debug builds:</p>

<p>``` groovy
android {
  buildTypes {</p>

<pre><code>release {
  signingConfig signingConfigs.debug
}
</code></pre>

<p>  }
}
```</p>

<p>But in the real project you should of course define the real signing configuration along the lines:</p>

<p>``` groovy
android {
  signingConfigs {</p>

<pre><code>release {
  storeFile file("release.keystore")
  storePassword "XXX"
  keyAlias "XXX"
  keyPassword "XXX"
}
</code></pre>

<p>  }</p>

<p>  buildTypes {</p>

<pre><code>release {
  signingConfig signingConfigs.release
}
</code></pre>

<p>  }
}
```</p>

<p>The other useful setting that goes into the buildTypes section is the Proguard configuration. Proguard is disabled by default in gradle builds so we need to turn it on for release builds; we also need to specify the rules to be used by Proguard:</p>

<p>``` groovy
android {
  buildTypes {</p>

<pre><code>release {
  runProguard true
  proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), file('proguard').listFiles()
  signingConfig signingConfigs.release
}
</code></pre>

<p>  }
}
```</p>

<p>There are two nice things about this configuration: we can easily specify that we want to use the default rules defined in Android SDK and we can specify multiple additional files. In the configuration above I use all files from &lsquo;proguard&rsquo; directory, but you can defined a simple list of files as well. It allows you to create a reusable Proguard config files for the commonly used libraries like <a href="http://actionbarsherlock.com/">ActionBarSherlock</a> or <a href="https://code.google.com/p/google-gson/">google-gson</a>.
So far so good. Let&rsquo;s declare the dependency on another project (a.k.a. module):</p>

<p><code>groovy
dependencies {
  compile project(':submoduleA')
}
</code></p>

<p>Note that this is also declared in the app project&rsquo;s build.gradle. It&rsquo;s perfectly fine to include this kind of dependency in your app project, but I&rsquo;m not happy with this solution for declaring dependencies between subprojects, because we&rsquo;re introducing dependencies to main project&rsquo;s structure.</p>

<p>``` groovy
// in build.gradle in main project</p>

<p>dependencies {
  compile project(&lsquo;:submoduleA&rsquo;)
  compile project(&lsquo;:submoduleB&rsquo;)
}</p>

<p>// in build.gradle of submoduleB, which depends on submoduleA</p>

<p>dependencies {
  compile project(&lsquo;:submoduleA&rsquo;)
}
```</p>

<p>It&rsquo;s especially bad when those subprojects are reusable libraries which should be completely separate from your main project. The workaround I read about, but haven&rsquo;t tested myself is creating a local Maven repository and publishing the artifacts from subprojects. AFAIK you still have to publish the artifacts in the right order, so you still have to kind of manually manage your dependencies, which IMO defeats the purpose of having .</p>

<p>I feel I&rsquo;m missing something elementary. The way I expect it to work is to define in each project what kind of artifacts are created, define artifacts each project depends on and let Gradle figure out the order of building subprojects. Please drop me a line if what I just wrote doesn&rsquo;t make any sense, I expect too much from the build system, or I missed some basic stuff.</p>

<p>Another thing that&rsquo;s not so great is the long startup time. Even getting the list of available tasks for a simple project takes between 5 and 8 seconds on 2012 MBP every single time. I understand why this happens &ndash; build configs theoretically can check the weather forecast and use different configuration on a rainy days &ndash; and that this overhead is negligible when compared to the actual build time, but every time I stare a this &ldquo;Loading&rdquo; prompt I think that this should be somehow cached.</p>

<p>It&rsquo;s time to wrap this blog post up. The main question I asked myself was: is it worth to move to gradle? I&rsquo;d say that if you have a manageable Maven build, then you shouldn&rsquo;t bother (yet), but it&rsquo;s a huge step forward when compared to ant builds.</p>
]]></content>
  </entry>
  
</feed>
