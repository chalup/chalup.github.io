<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-06-13T21:07:14+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Loaders]]></title>
    <link href="http://chalup.github.io/blog/2014/06/12/android-loaders/"/>
    <updated>2014-06-12T21:52:43+02:00</updated>
    <id>http://chalup.github.io/blog/2014/06/12/android-loaders</id>
    <content type="html"><![CDATA[<p>If you fetch the data from any <code>ContentProvider</code> in your application, the most likely scenarios are:</p>

<ol>
<li>You&rsquo;re absolutely clueless and fetch the data on UI thread.</li>
<li>You&rsquo;re using an <code>AsyncTask</code> and:

<ul>
<li>Your app crashes on screen orientation change.</li>
<li>You block the screen orientation, because you googled this &ldquo;solution&rdquo; on StackOverflow.</li>
<li>You wrote error prone boilerplate code to detach and reattach the <code>AsyncTask</code> from the Activity.</li>
</ul>
</li>
<li>You are using <code>CursorLoader</code>.</li>
</ol>


<p>But accessing <code>ContentProvider</code> is probably not the only type of asynchronous operations you perform. You might want to access <code>SharedPreferences</code>, read a file or query a web API. In that case you need <code>Loader&lt;SomeOtherDataThanCursor&gt;</code>, but implementing one correctly is a bit tricky.</p>

<p>I&rsquo;ll walk you through the entire process of understanding how the Loaders work, implementing a sane base class for your Loaders, implementing <code>CursorLoader</code> with all issues fixed and extending it to allow multiple notification Uris. It&rsquo;ll be a long post so grab a cup of your favourite beverage.</p>

<h2>Loaders 101</h2>

<p>Loader should do three things:</p>

<ol>
<li>Load data in background thread.</li>
<li>Cache the loaded data, so you won&rsquo;t reload it after screen orientation change.</li>
<li>If applicable, monitor the data source and reload the data when necessary.</li>
</ol>


<p>The Loader class itself doesn&rsquo;t provide any mechanism for loading the data in background thread. You either have to implement this yourself, or you can subclass the <code>AsyncTaskLoader</code>. This covers the first point on our requirements list.</p>

<p>The 2nd point is not handled by <code>AsyncTaskLoader</code>. In fact the <code>AsyncTaskLoader</code> is far from being fully functional, for example this perfectly reasonable looking implementation won&rsquo;t work:</p>

<p>``` java
public class DasLoader extends AsyncTaskLoader<String> {
  public DasLoader(Context context) {</p>

<pre><code>super(context);
</code></pre>

<p>  }</p>

<p>  @Override
  public String loadInBackground() {</p>

<pre><code>return "Das";
</code></pre>

<p>  }
}
```</p>

<h2>AbstractLoader v1</h2>

<p>A good starting point for creating either <code>CursorLoader</code> implementation or LoaderCustom.java from SDK samples. Here&rsquo;s the common part of these two implementations, which provides all necessary boilerplate for loading and caching the data:</p>

<p>``` java
public abstract class AbstractLoader<T> extends AsyncTaskLoader<T> {
  T mResult;</p>

<p>  public AbstractLoader(Context context) {</p>

<pre><code>super(context);
</code></pre>

<p>  }</p>

<p>  @Override
  public void deliverResult(T result) {</p>

<pre><code>if (isReset()) {
  releaseResources(result);
  return;
}

T oldResult = mResult;
mResult = result;

if (isStarted()) {
  super.deliverResult(result);
}

if (oldResult != result &amp;&amp; oldResult != null) {
  releaseResources(oldResult);
}
</code></pre>

<p>  }</p>

<p>  @Override
  public void onCanceled(T result) {</p>

<pre><code>super.onCanceled(result);
releaseResources(result);
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onReset() {</p>

<pre><code>super.onReset();

// Ensure the loader is stopped
onStopLoading();

releaseResources(mResult);
mResult = null;
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onStartLoading() {</p>

<pre><code>if (mResult != null) {
  deliverResult(mResult);
}
if (takeContentChanged() || mResult == null) {
  forceLoad();
}
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onStopLoading() {</p>

<pre><code>cancelLoad();
</code></pre>

<p>  }</p>

<p>  protected void releaseResources(T result) {
  }
}
```</p>

<p>Why this class is not provided by the framework is a mystery to me, but hey, that&rsquo;s just one more thing you have to know when coding for Android platform. Now you can write your custom Loader like this:</p>

<p>``` java
public class DasLoader extends AbstractLoader<String> {
  public DasLoader(Context context) {</p>

<pre><code>super(context);
</code></pre>

<p>  }</p>

<p>  @Override
  public String loadInBackground() {</p>

<pre><code>return "Das";
</code></pre>

<p>  }
}
```</p>

<p>But why do we need all that code? The key to understanding the Loaders is understanding the expected Loader&rsquo;s behaviour in different states: started, stopped, abandoned and reset. Upon entering each state, the appropriate callback is executed:</p>

<ul>
<li><code>onStartLoading</code>: the Loader was created and should either load the data or return cached data.</li>
<li><code>onStopLoading</code>: the Loader should keep the cached data and monitor the data source for changes, but it shouldn&rsquo;t load the data. This happens for example when users presses home button from your app.</li>
<li><code>onAbandoned</code>: someone restarted the Loader. New instance of this Loader was created in <code>onCreateLoader</code> callback in your <code>Fragment</code>/<code>Activity</code>/whatever and loads new data. The abandoned Loader should keep the data until the new Loader loads and delivers it&rsquo;s data. There is no point of monitoring data source or reloading the data in abandoned Loader &ndash; the data will be loaded by the new instance. When new Loader delivers it&rsquo;s data this Loader will be reset.</li>
<li><code>onReset</code>: the data previously loaded by this Loader are no longer used and should be cleaned up. This Loader might be started again, so make sure you clean up also any old state in your Loader implementation.</li>
</ul>


<p>The <code>AsyncTaskLoader</code> provides additional callback:</p>

<ul>
<li><code>onCancelled</code>: called after data loading when it turns out that this data is no longer needed, for example when the <code>AsyncTask</code> executing your <code>onLoadInBackground</code> was cancelled. In this callback you should take care of releasing resources.</li>
</ul>


<p>Since the releasing resources should be also performed in <code>onReset</code> callback and in our deliverResults implementation, our AbstractLoader class provides handy <code>releaseResources()</code> callback for closing your <code>Cursor</code>s, file handles, etc.</p>

<p>Now let&rsquo;s walk through our <code>AbstractLoader</code> implementation. When someone starts our Loader using <code>LoaderManager.initLoader()</code>, the <code>onStartLoading</code> is called:</p>

<p>``` java
  T mResult;</p>

<p>  // &hellip;</p>

<p>  @Override
  protected void onStartLoading() {</p>

<pre><code>if (mResult != null) {
  deliverResult(mResult);
}
if (takeContentChanged() || mResult == null) {
  forceLoad();
}
</code></pre>

<p>  }
```</p>

<p>We keep the loaded data in <code>mResult</code> member of our <code>AbstractLoader</code>. If we have already loaded the data, we can just deliver the results to Loader clients. If the cache is empty or the Loader was notified about new data available for fetching, we force data reload by calling <code>forceLoad()</code> method. It starts <code>AsyncTask</code> which executes <code>loadInBackground</code> in background thread and the result is passed to <code>deliverResults</code> function:</p>

<p>``` java
  @Override
  public void deliverResult(T result) {</p>

<pre><code>if (isReset()) {
  releaseResources(result);
  return;
}

T oldResult = mResult;
mResult = result;

if (isStarted()) {
  super.deliverResult(result);
}

if (oldResult != result &amp;&amp; oldResult != null) {
  releaseResources(oldResult);
}
</code></pre>

<p>  }
```</p>

<p>A lot of interesting things happen here. First, we check if the loader was put into <code>reset</code> state. In this state all the previous resources were already released, so we just need to take care of newly loaded data. Then we swap the data in cache, call <code>deliverResults</code> in Loader and then release the resources for previously cached data.</p>

<p>When the Fragment or Activity with active Loader is stopped, the Loaders are also put in the stopped state. It means that they should keep the cached data, monitor if this data is still valid, but they should not actively load the data or deliver the results to UI thread. In terms of <code>AsyncTaskLoader</code> it means that any running <code>AsyncTasks</code> should be cancelled:</p>

<p>``` java
  @Override
  protected void onStopLoading() {</p>

<pre><code>cancelLoad();
</code></pre>

<p>  }
```</p>

<p>Current implementation of <code>AsyncTaskLoader</code> do not interrupt the active tasks, it only marks that the results of these tasks should not be delivered to the UI thread. However, the results might require some resource releasing, so the <code>onCancelled</code> callback is called:</p>

<p>``` java
  @Override
  public void onCanceled(T result) {</p>

<pre><code>super.onCanceled(result);
releaseResources(result);
</code></pre>

<p>  }
```</p>

<p>The last callback we have to implement is <code>onReset</code>:</p>

<p>```java
  @Override
  protected void onReset() {</p>

<pre><code>super.onReset();

// Ensure the loader is stopped
onStopLoading();

releaseResources(mResult);
mResult = null;
</code></pre>

<p>  }
```</p>

<p>There are two important things here. First, the Loader can be moved to reset state from started state, which means it can still have active <code>AsyncTasks</code> executing <code>loadInBackground</code>. We need to stop them first. Then, as per the specified contract, we have to release the resources and clear the cache.</p>

<p>What about <code>onAbandoned</code> callback? AbstractLoader doesn&rsquo;t monitor any data source by itself, so this callback doesn&rsquo;t have to be implemented.</p>

<h2>CursorLoader</h2>

<p>So how would we implement observing a data source and automatic reloading? Let&rsquo;s see how would the <code>CursorLoader</code> implementation look like had we used our AbstractLoader as a base class (literally; if you merge MyCursorLoader and AbstractLoader code samples from this post, you&rsquo;ll get exactly the CursorLoader implementation from support-v4):</p>

<p>```java
public class MyCursorLoader extends AbstractLoader<Cursor> {
  private final ForceLoadContentObserver mObserver;</p>

<p>  public MyCursorLoader(Context context) {</p>

<pre><code>super(context);
mObserver = new ForceLoadContentObserver();
</code></pre>

<p>  }</p>

<p>  // bunch of setters for uri, projection, selection, etc. Omitted for brevity</p>

<p>  @Override
  public Cursor loadInBackground() {</p>

<pre><code>Cursor cursor = getContext().getContentResolver().query(mUri, mProjection, mSelection,
    mSelectionArgs, mSortOrder);
if (cursor != null) {
  // Ensure the cursor window is filled
  cursor.getCount();
  cursor.registerContentObserver(mObserver);
}
return cursor;
</code></pre>

<p>  }
}
```</p>

<p>This implementation has two bugs and one kind-of-feature. Let&rsquo;s start with the last one.</p>

<p><code>onStartLoading</code> contract specifies, that you should start monitoring the data source upon entering this state. But let&rsquo;s think what would happen if you had a query that takes 200ms to run and your data source would change every 150ms. The loader would never deliver any data, because every load request would be cancelled in middle of <code>loadInBackground</code> execution by our content observer.</p>

<p>I guess that&rsquo;s why the Android implementation of <code>CursorLoader</code> registers the observer after the data is loaded. This way the first results are delivered as soon as possible, but for subsequent loads the data is delivered only when data didn&rsquo;t change during loading. I&rsquo;m not sure if it was intentional, or this behavior was implemented by accident, but it makes sense to me, so let&rsquo;s adjust our Loaders contract and implement this behavior in our AbstractLoader.</p>

<p>But if you look closely, the <code>CursorLoader</code> implementation violates even this updated contract. Remember that <code>loadInBackground</code> and <code>deliverResults</code> are executed on separate threads. So what would happen if the data observer is triggered after <code>registerContentObserver</code> call, but before the <code>deliverResults</code>? We&rsquo;d get exactly the same behavior we&rsquo;d get had we registered the ContentObserver in <code>onStartLoading</code> &ndash; the loader would never deliver it&rsquo;s data. That&rsquo;s the first bug.</p>

<p>The second issue with <code>CursorLoader</code> implementation is violation of <code>onAbandon</code> callback contract. If someone calls restartLoader and the content observer is triggered, the abandoned Loader instance will happily reload it&rsquo;s data just to throw it away.</p>

<p>You can dismiss it as something that would happen only 1% of the time and has negligible impact, and if we were talking about application code, I&rsquo;d agree with you, but IMO library code that will be used by thousands of developers should be held to a higher standard.</p>

<h2>Fixing CursorLoader</h2>

<p>Here&rsquo;s the wrap up of changes in behavior:
1. Register <code>ContentObserver</code> after the first data is delivered, not after the first data is loaded.
2. Unregister <code>ContentObserver</code> in <code>onAbandon</code>.</p>

<p>The first point requires changes to <code>deliverResult</code> method, so it makes sense to modify our AbstractLoader:</p>

<p>``` java
  @Override
  public void deliverResult(T result) {</p>

<pre><code>if (isReset()) {
  releaseResources(result);
  return;
}

T oldResult = mResult;
mResult = result;

if (isStarted()) {
  if (oldResult != result) {
    onNewDataDelivered(result);
  }
  super.deliverResult(result);
}

if (oldResult != result &amp;&amp; oldResult != null) {
  releaseResources(oldResult);
}
</code></pre>

<p>  }</p>

<p>  protected void onNewDataDelivered(T data) {
  }
```</p>

<p>Our <code>CursorLoader</code> implementation would look like this:</p>

<p>``` java
public class MyCursorLoader extends AbstractLoader<Cursor> {
  private final ForceLoadContentObserver mObserver;</p>

<p>  public MyCursorLoader(Context context) {</p>

<pre><code>super(context);
mObserver = new ForceLoadContentObserver();
</code></pre>

<p>  }</p>

<p>  // bunch of setters for uri, projection, selection, etc. Omitted for brevity</p>

<p>  @Override
  public Cursor loadInBackground() {</p>

<pre><code>Cursor cursor = getContext().getContentResolver().query(mUri, mProjection, mSelection,
    mSelectionArgs, mSortOrder);
if (cursor != null) {
  // Ensure the cursor window is filled
  cursor.getCount();
}
return cursor;
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onNewDataDelivered(Cursor data) {</p>

<pre><code>super.onNewDataDelivered(data);
data.registerContentObserver(mObserver);
</code></pre>

<p>  }
}
```</p>

<p>The second part &ndash; unregistering observer in <code>onAbandon</code> &ndash; is tricky. It&rsquo;s illegal to call <code>Cursor.unregisterContentObserver</code> with observer that wasn&rsquo;t registered and the <code>onAbandon</code> can be called when the <code>deliverResults</code> wasn&rsquo;t called (see <code>AsyncTaskLoader.dispatchOnLoadComplete()</code> implementation). One solution would be keeping the set of Cursors that were registered, but it&rsquo;s not optimal. Instead, we can create a proxy ContentObserver that can be enabled or disabled:</p>

<p>``` java
public class DisableableContentObserver extends ContentObserver {
  private final ContentObserver mWrappedObserver;
  private boolean mIsEnabled = true;</p>

<p>  public DisableableContentObserver(ContentObserver wrappedObserver) {</p>

<pre><code>super(new Handler());
mWrappedObserver = wrappedObserver;
</code></pre>

<p>  }</p>

<p>  @Override
  public void onChange(boolean selfChange) {</p>

<pre><code>if (mIsEnabled) {
  mWrappedObserver.onChange(selfChange);
}
</code></pre>

<p>  }</p>

<p>  public void setEnabled(boolean isEnabled) {</p>

<pre><code>mIsEnabled = isEnabled;
</code></pre>

<p>  }
}
```</p>

<p>``` java
public class MyCursorLoader extends AbstractLoader<Cursor> {
  private final DisableableContentObserver mObserver;</p>

<p>  public MyCursorLoader(Context context) {</p>

<pre><code>super(context);
mObserver = new DisableableContentObserver(new ForceLoadContentObserver());
</code></pre>

<p>  }</p>

<p>  // bunch of setters for uri, projection, selection, etc. Omitted for brevity</p>

<p>  @Override
  protected void onStartLoading() {</p>

<pre><code>mObserver.setEnabled(true);
super.onStartLoading();
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onAbandon() {</p>

<pre><code>mObserver.setEnabled(false);
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onReset() {</p>

<pre><code>mObserver.setEnabled(false);
super.onReset();
</code></pre>

<p>  }</p>

<p>  @Override
  public Cursor loadInBackground() {</p>

<pre><code>Cursor cursor = getContext().getContentResolver().query(mUri, mProjection, mSelection,
    mSelectionArgs, mSortOrder);
if (cursor != null) {
  // Ensure the cursor window is filled
  cursor.getCount();
}
return cursor;
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onNewDataDelivered(Cursor data) {</p>

<pre><code>super.onNewDataDelivered(data);
data.registerContentObserver(mObserver);
</code></pre>

<p>  }
}
```</p>

<h2>AbstractObservingLoader</h2>

<p>The <code>CursorLoader</code> is a bit special case, because the <code>Cursor</code> itself contains <code>ContentObservable</code>. In most cases however the content observers and loaded data would be completely separated. For these cases it would be useful to have a base class for Loader which registers some <code>ContentObservers</code>:</p>

<p>``` java
public abstract class AbstractObservingLoader<T> extends AbstractLoader<T> {
  protected final DisableableContentObserver mObserver;
  private boolean mIsRegistered;</p>

<p>  public AbstractObservingLoader(Context context) {</p>

<pre><code>super(context);
mObserver = new DisableableContentObserver(new ForceLoadContentObserver());
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onStartLoading() {</p>

<pre><code>mObserver.setEnabled(true);
super.onStartLoading();
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onAbandon() {</p>

<pre><code>mObserver.setEnabled(false);
unregisterObserver(mObserver);
mIsRegistered = false;
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onReset() {</p>

<pre><code>mObserver.setEnabled(false);
unregisterObserver(mObserver);
mIsRegistered = false;z
super.onReset();
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onNewDataDelivered(T data) {</p>

<pre><code>if (!mIsRegistered) {
  mIsRegistered = true;
  registerObserver(mObserver);
}
</code></pre>

<p>  }</p>

<p>  protected abstract void registerObserver(ContentObserver observer);
  protected abstract void unregisterObserver(ContentObserver observer);
}
```</p>

<p>We need to keep the registered state in our Loader, because the default <code>Observable</code> implementation doesn&rsquo;t like registering the same observer twice or unregistering not registered observer.</p>

<p>Now we can use this class as a base for a Loader which should be reloaded when one of specified <code>Uri</code>s is triggered:</p>

<p>``` java
public class MyCursorLoader extends AbstractObservingLoader<Cursor> {</p>

<p>  public MyCursorLoader(Context context) {</p>

<pre><code>super(context);
</code></pre>

<p>  }</p>

<p>  // bunch of setters for uri, projection, selection, etc. Omitted for brevity</p>

<p>  @Override
  public Cursor loadInBackground() {</p>

<pre><code>Cursor cursor = getContext().getContentResolver().query(mUri, mProjection, mSelection,
    mSelectionArgs, mSortOrder);
if (cursor != null) {
  // Ensure the cursor window is filled
  cursor.getCount();
}
return cursor;
</code></pre>

<p>  }</p>

<p>  @Override
  protected void onNewDataDelivered(Cursor data) {</p>

<pre><code>super.onNewDataDelivered(data);
data.registerContentObserver(mObserver);
</code></pre>

<p>  }</p>

<p>  @Override
  protected void registerObserver(ContentObserver observer) {</p>

<pre><code>for (Uri uri : mObservedUris) {
  getContext().getContentResolver().registerContentObserver(uri, true, observer);
}
</code></pre>

<p>  }</p>

<p>  @Override
  protected void unregisterObserver(ContentObserver observer) {</p>

<pre><code>getContext().getContentResolver().unregisterContentObserver(observer);
</code></pre>

<p>  }
}
```</p>

<h2>Conclusions</h2>

<p>I think the <code>Loaders</code> aren&rsquo;t as bad as some people think and say. Four Loader states might seem complicated at first, but if you think about Android <code>Activity</code> lifecycle they make perfect sense and they are something you&rsquo;d have to implement yourself, with a high probability of mucking things up. The only thing lacking is documentation and sane base classes for extensions, something I hope I delivered through this blog post.</p>

<p><a href="https://plus.google.com/114205433913370454414">+CommonsWare</a> wrote few weeks ago that <a href="http://commonsware.com/blog/2014/03/31/cwac-loaderex-failed-abstractions.html">he considers Loader to be a failed abstraction</a>, mostly because the interface assumes there is a single object which notifies the Loader about new data. He concluded his post with the following sentence:</p>

<p><blockquote><p>In my case, if I am going to have some singleton manager object, with distinct data objects per operation, I am going to use something more flexible than Loader, such as an event bus.</p></blockquote></p>

<p>Extending <code>AbstractObservingLoader</code> to load some data from <code>SQLiteDatabase</code> and subscribe to some event bus for model change events should be trivial, and you&rsquo;d get a lot of things for free &ndash; performing loads in background, cancelling loads, caching results, invalidating cache, and so on.</p>

<p>Having said that, <code>Loaders</code> are not solution to every single problem. They are coupled with activity lifecycle, so they are not suitable for long running tasks that should not be interrupted when user navigates away. In these cases the <code>IntentService</code>, or some other <code>Service</code> implementation is a better choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ProGuard in Ant Debug Builds]]></title>
    <link href="http://chalup.github.io/blog/2014/06/10/enabling-proguard-for-debug-builds/"/>
    <updated>2014-06-10T09:24:00+02:00</updated>
    <id>http://chalup.github.io/blog/2014/06/10/enabling-proguard-for-debug-builds</id>
    <content type="html"><![CDATA[<p>The post title raises two questions: &ldquo;why would you want to use ProGuard in debug builds?&rdquo; and &ldquo;why the hell are you still using ant?!&rdquo;.</p>

<p>The answer for the first question is simple, so let&rsquo;s start with that one. A while ago we hit the <a href="https://code.google.com/p/android/issues/detail?id=208140">infamous 64k method limit</a>. The most reasonable option is to use ProGuard to remove unused code, especially from the dependencies. For some unreasonable option, see the Jesse Wilson&rsquo;s comments in the linked bug report.</p>

<p>And why ant instead of Maven, gradle, buck or any other non-antique build tool? We&rsquo;ve started the project in dark ages (in 2011), when the android Maven plugin was still under heavy development and we encontered several issues with it. Ant builds just worked, so we set it up and nobody had to touch it for several months. At one point we considered switching to gradle, because setting up some annotation processors with ant was a pain in the ass, but again there were some issues with using gradle in our setup at the time (IIRC it was not possible to use local aar dependencies, and the builds were sooooooo slooooooow), so we did not switch.</p>

<p>It all boils down to this: I can spend several hours working on some useful feature or library or I can use this time to switch to another build system. Until the latter option gives me some real benefits, I&rsquo;d rather work on some features.</p>

<p>Anyways, using ProGuard for IDE builds is easy: go to Project Structure, Facets, and fill appropriate options on ProGuard tab for your project. That&rsquo;s fine for developers workflow, but not for CI.</p>

<p>To make ProGuard work with ant you need to customize your build.xml. First, if this is your first cusomization, change the version tag in build.xml as recommended:</p>

<p>``` xml</p>

<!-- version-tag: custom -->


<p>```</p>

<p>Then override <code>-debug-obfuscation-check</code> and <code>-release-obfuscation-check</code> targets:</p>

<p>``` xml
<target name="-set-proguard-config"></p>

<pre><code>&lt;condition property="proguard.config" value="proguard.cfg" else="proguard_debug.cfg"&gt;
    &lt;isfalse value="${build.is.packaging.debug}"/&gt;
&lt;/condition&gt;
</code></pre>

<p></target></p>

<p><target name="-debug-obfuscation-check" depends="-set-proguard-config"></p>

<pre><code>&lt;!-- enable proguard even in debug mode --&gt;
&lt;property name="proguard.enabled" value="true"/&gt;
&lt;echo&gt;proguard.config is ${proguard.config}&lt;/echo&gt;

&lt;!-- Secondary dx input (jar files) is empty since all the jar files will be in the obfuscated jar --&gt;
&lt;path id="out.dex.jar.input.ref" /&gt;
</code></pre>

<p></target></p>

<p><target name="-release-obfuscation-check" depends="-set-proguard-config"></p>

<pre><code>&lt;echo level="info"&gt;proguard.config is ${proguard.config}&lt;/echo&gt;
&lt;condition property="proguard.enabled" value="true" else="false"&gt;
    &lt;and&gt;
        &lt;isset property="build.is.mode.release" /&gt;
        &lt;isset property="proguard.config" /&gt;
    &lt;/and&gt;
&lt;/condition&gt;
&lt;if condition="${proguard.enabled}"&gt;
    &lt;then&gt;
        &lt;echo level="info"&gt;Proguard.config is enabled&lt;/echo&gt;
        &lt;!-- Secondary dx input (jar files) is empty since all the
             jar files will be in the obfuscated jar --&gt;
        &lt;path id="out.dex.jar.input.ref" /&gt;
    &lt;/then&gt;
&lt;/if&gt;
</code></pre>

<p></target>
```</p>

<p>Note that I&rsquo;ve also introduced a <code>-set-proguard-config</code> task to be able to select different configuration for debug and release builds. We do not want to do obfuscation or advanced optimisations in debug, a simple dead code pruning is all we need. Since ant properties are immutable, this means that you <strong>HAVE TO</strong> remove proguard.config from your ant.properties.</p>

<p>I&rsquo;m not exactly sure when this happened, but at some point our build times skyrocketed to over 3 minutes. It&rsquo;s fine for release or CI scripts, but absolutely unnacceptable for developers workflow. Fortunately it was enough to bump the heap size for Proguard. In Android Studio go to Settings, Compiler, Android Compilers and pass <code>-Xmx1024m</code> to ProGuard VM options.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clicking Unclickable List Items]]></title>
    <link href="http://chalup.github.io/blog/2014/05/22/clicking-unclickable-list-items/"/>
    <updated>2014-05-22T22:26:00+02:00</updated>
    <id>http://chalup.github.io/blog/2014/05/22/clicking-unclickable-list-items</id>
    <content type="html"><![CDATA[<p>One of the UI patterns that improve lists usability is dividing items into sections. The section might be the first letter of the main text on the list item, date formatted and rounded in a specific way or whatever makes sense for your data.</p>

<p>From the technical point of view you can either add the header view to every list item and show and hide them as needed or create the separate view for header and regular list item and register multiple view types in your Adapter. Both options were described in details by <a href="https://plus.google.com/118417777153109946393">+Cyril Mottier</a> in excellent <a href="http://cyrilmottier.com/2011/07/05/listview-tips-tricks-2-section-your-listview/">ListView Tips &amp; Tricks #2: Sectioning Your ListView</a> blog post.</p>

<p>If you choose the second approach, you&rsquo;ll have to decide what to return from your <code>Adapter</code>&rsquo;s <code>getItem</code> and <code>getItemId</code> methods for items representing sections. If your sections are not supposed to be clickable, you might implement your <code>Adapter</code> like this:
``` java
@Override
public Object getItem(int position) {
  return getItemViewType(position) == TYPE_ITEM</p>

<pre><code>  ? mItems[getCursorPosition(position)]
  : null;
</code></pre>

<p>}</p>

<p>@Override
public long getItemId(int position) {
  return getItemViewType(position) == TYPE_ITEM</p>

<pre><code>  ? getCursorPosition(position)
  : 0;
</code></pre>

<p>}</p>

<p>@Override
public boolean areAllItemsEnabled() {
  return false;
}</p>

<p>@Override
public boolean isEnabled(int position) {
  return getItemViewType(position) == TYPE_ITEM;
}
```</p>

<p>And your <code>onListItemClickListener</code> like this:
``` java
@Override
public void onListItemClick(ListView l, View v, int position, long id) {
  super.onListItemClick(l, v, position, id);</p>

<p>  // dummy action which uses Object returned from getItem(position)
  Log.d(&ldquo;DMFM&rdquo;, getListAdapter().getItem(position).toString());
}
```</p>

<p>If you do so, the Android has a nasty surprise for you:</p>

<p>```
java.lang.NullPointerException</p>

<pre><code>at org.chalup.dialmformonkey.app.MainFragment.onListItemClick(MainFragment.java:38)
at android.app.ListFragment$2.onItemClick(ListFragment.java:160)
at android.widget.AdapterView.performItemClick(AdapterView.java:298)
at android.widget.AbsListView.performItemClick(AbsListView.java:1100)
at android.widget.AbsListView$PerformClick.run(AbsListView.java:2749)
at android.widget.AbsListView$1.run(AbsListView.java:3423)
at android.os.Handler.handleCallback(Handler.java:725)
...
</code></pre>

<p>```</p>

<p>The only way this can happen is getting <code>null</code> from <code>Adapter.getItem()</code>, but this method will be called only for disabled items, right?</p>

<p>``` java
@Override
public void onListItemClick(ListView l, View v, int position, long id) {
  super.onListItemClick(l, v, position, id);</p>

<p>  Log.d(&ldquo;DMFM&rdquo;, &ldquo;Clicked on item &rdquo; + position + &ldquo; which is &rdquo; +</p>

<pre><code>    (getListAdapter().isEnabled(position) 
        ? "enabled"
        : "disabled")
</code></pre>

<p>  );</p>

<p>  // dummy action which uses Object returned from getItem(position)
  Log.d(&ldquo;DMFM&rdquo;, getListAdapter().getItem(position).toString());
}
```</p>

<p>Wrong:</p>

<p><code>
D/DMFM﹕ Clicked on item 4 which is enabled
D/DMFM﹕ Abondance
D/DMFM﹕ Clicked on item 4 which is enabled
D/DMFM﹕ Abondance
D/DMFM﹕ Clicked on item 31 which is enabled
D/DMFM﹕ Aragon
D/DMFM﹕ Clicked on item 31 which is enabled
D/DMFM﹕ Aragon
D/dalvikvm﹕ GC_CONCURRENT freed 138K, 3% free 8825K/9016K, paused 0ms+0ms, total 3ms
D/DMFM﹕ Clicked on item 28 which is disabled
</code></p>

<p>It&rsquo;s very difficult to reproduce this error manually, especially if tapping the list item does something more than writing to logcat, but I investigated this issue, because the stack traces above appeared in crash reports on Google Analytics, so several people managed to click exactly wrong area at the wrong time.</p>

<p>I didn&rsquo;t investigate the issue thoroughly, but it seems there must be some disparity between checking the <code>isEnabled</code> method and getting the item. If I ever dive into <code>ListView</code> code, I&rsquo;ll definitely write about it. If you want to reproduce or investigate the issue yourself, compile <a href="https://github.com/chalup/blog-unclickable-items">this project</a> and run the monkey:</p>

<p><code>
$ adb shell monkey -p org.chalup.dialmformonkey.app -v 500
</code></p>

<p>So what can we do? First option is checking the <code>Adapter.isEnabled()</code> in your <code>onListItemClick</code> listener, which is yet another kind of boilerplate you have to add to your Android code, but it&rsquo;s super easy to add. The other option is going with the first sectioning approach, i.e. putting section as a part of the clickable list item, but it might not work for your use case (for example adapter with multiple item types).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android App Widgets Issues]]></title>
    <link href="http://chalup.github.io/blog/2014/05/10/android-app-widgets-issues/"/>
    <updated>2014-05-10T15:42:00+02:00</updated>
    <id>http://chalup.github.io/blog/2014/05/10/android-app-widgets-issues</id>
    <content type="html"><![CDATA[<p>This week I spend few days analyzing and fixing various issues of app widget in Base CRM application.</p>

<p>This part of our codebase was created over a year ago during one of our internal hackathons and was released soon after that. Most of the times it worked. Every once in a while we received a weird crash report from Google Analytics, but it never caused much trouble. Recently though we received few complaints from customers. I happened to have few hours available for bug hunting, so I took a dive.</p>

<p>The widget is really a simple todo list backed by <code>ContentProvider</code>. The code looks like it was based on the WeatherWidget from SDK samples. What can possibly go wrong?</p>

<h2>Issue #1: gazillions of threads started</h2>

<p>Take a look at the code of WeatherWidgetProvider:
<code>java
public WeatherWidgetProvider() {
  // Start the worker thread
  sWorkerThread = new HandlerThread("WeatherWidgetProvider-worker");
  sWorkerThread.start();
  sWorkerQueue = new Handler(sWorkerThread.getLooper());
}
</code></p>

<p>The WeatherWidgetProvider is an <code>AppWidgetProvider</code> implementation, which extends a regular <code>BroadcastReceiver</code>. It means that for every action a new instance of WeatherWidgetProvider is created, and the current implementation spawns new thread which is never closed.</p>

<p>The sample author obviously intended to create only one worker thread &ndash; the sWorkerThread is the static &ndash; but forgot to do the null check before creating a new thread. So let&rsquo;s fix it:
``` java
public WeatherWidgetProvider() {
  if (sWorkerThread == null) {</p>

<pre><code>// Start the worker thread
sWorkerThread = new HandlerThread("WeatherWidgetProvider-worker");
sWorkerThread.start();
sWorkerQueue = new Handler(sWorkerThread.getLooper());
</code></pre>

<p>  }
}
```</p>

<h2>Issue #2: no refresh after application update</h2>

<p>The widget shows data from the same <code>ContentProvider</code> as the main app, so when the user creates a task inside in the main app and then goes back to homescreen, the task should be displayed on the widget. To achieve this we did the same thing the WeatherWidget sample does &ndash; we register the <code>ContentObserver</code> in <code>onEnabled</code> callback of <code>AppWidgetProvider</code>:</p>

<p>``` java
@Override
public void onEnabled(Context context) {
  final ContentResolver r = context.getContentResolver();
  if (sDataObserver == null) {</p>

<pre><code>final AppWidgetManager mgr = AppWidgetManager.getInstance(context);
final ComponentName cn = new ComponentName(context, WeatherWidgetProvider.class);
sDataObserver = new WeatherDataProviderObserver(mgr, cn, sWorkerQueue);
r.registerContentObserver(WeatherDataProvider.CONTENT_URI, true, sDataObserver);
</code></pre>

<p>  }
}
```</p>

<p>The <code>onEnabled</code> callback is called when the first instance of the widget is added to homescreen, so the code looks fine. Unfortunately the callback is not called at your process startup. So if your app is updated and the process is restarted, the <code>ContentObserver</code> won&rsquo;t be registered. The same thing happens if your app crashes or is stopped by the OS to free resources.</p>

<p>To solve this you have to register the <code>ContentObserver</code> in few more places. I have added registration to <code>onCreate</code> callback in <code>RemoteViewsFactory</code> and the <code>onReceive</code> part which handles our custom actions in <code>AppWidgetProvider</code>.</p>

<p>WeatherWidget sample does one more thing wrong: the <code>ContentObserver</code> is never unregistered and the worker thread is never stopped. The correct place to do this is <code>onDisabled</code> callback in <code>AppWidgetProvider</code>.</p>

<h2>Issue #3: <code>CursorOutOfBoundsException</code> crash</h2>

<p>Ever since we introduced the tasks widget, we&rsquo;ve occasionally received the crash reports indicating that the RemoteViewsFactory requested elements outside of <code>[0, getCount)</code> range:</p>

<p>```
05-10 15:22:50.559  13781-13795/org.chalup.widgetfail.widget E/AndroidRuntime﹕ FATAL EXCEPTION: Binder_2</p>

<pre><code>Process: org.chalup.widgetfail.widget, PID: 13781
android.database.CursorIndexOutOfBoundsException: Index 1 requested, with a size of 1
</code></pre>

<p>```</p>

<p>The reproduction steps for this issue are quite complicated:</p>

<ul>
<li>Tap the task on the widget to mark it was completed. Internally we set the <code>PENDING_DONE</code> flag, so the task is marked as done, but is still displayed on the list, so the user can tap it again and reset the flag.</li>
<li>Trigger the sync</li>
<li><code>SyncAdapter</code> syncs the Task to our backend. The task is marked as <code>DONE</code> in our database, which triggers the <code>ContentObserver</code> registered by the widget.</li>
<li><code>ContentObserver</code> triggers <code>onDataSetChanged</code> callback in <code>RemoteViewsFactory</code>, which then calls <code>getCount</code> and <code>getViewAt</code></li>
<li>In some rare cases <code>getViewAt</code> with position == result of <code>getCount</code> is called</li>
</ul>


<p>It looks like some kind of a race condition or another threading issue in Android code which populates the app widgets. I tried synchronizing the <code>RemoteViewsFactory</code> methods, but it didn&rsquo;t help. The <code>getViewAt</code> have to return a valid <code>RemoteViews</code>, so I fixed it up by returning the loading view when element outside of valid range is requested:</p>

<p>``` java
@Override
public synchronized RemoteViews getViewAt(int position) {
  if (position >= mCursor.getCount()) {</p>

<pre><code>return getLoadingView();
</code></pre>

<p>  } else {</p>

<pre><code>mCursor.moveToPosition(position);

// ...
</code></pre>

<p>  }
}
```</p>

<h2>Issue #4: no refresh when &ldquo;Don&rsquo;t keep activities&rdquo; setting is enabled</h2>

<p>User can click on the tasks displayed on the widget to go to the edit screen. The activity is closed when user saves or discards changes and the homescreen with the widget is shown again. Changing the task triggers the <code>ContentObserver</code>, the <code>onDataSetChanged</code> is called on all active <code>RemoteViewsFactories</code>, but sometimes other callbacks (<code>getCount</code>, <code>getViewAt</code>, etc.) are not called.</p>

<p>It turns out this happens when the Homescreen activity is recreated because of low memory condition. To easily reproduce this issue you can check the &ldquo;Don&rsquo;t keep activities&rdquo; in developers settings.</p>

<p>I do not have a solution or workaround for this issue unfortunately. I&rsquo;ll file a bug report and hope for the best.</p>

<h2>Recap</h2>

<p>There are mutliple issues with the WeatherWidget sample and some issues with the system services responsible for populating app widgets with content. I&rsquo;ve created a simple project which reproduces the issues #3 and #4 and shows the correct way of registering <code>ContentObserver</code> for your widget. The sources are <a href="https://github.com/chalup/android-widget-fail">available on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use minSdkVersion=10 for Libraries]]></title>
    <link href="http://chalup.github.io/blog/2014/02/25/use-minsdkversion10-for-libraries/"/>
    <updated>2014-02-25T21:42:00+01:00</updated>
    <id>http://chalup.github.io/blog/2014/02/25/use-minsdkversion10-for-libraries</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve pushed new versions of <a href="https://github.com/chalup/microorm">microorm</a> and <a href="https://github.com/chalup/thneed">thneed</a> to Maven Central today. The most notable change for both libraries is dropping the support for Android 2.2 and earlier versions. The same change was applied to all Android libraries open sourced by <a href="https://github.com/orgs/futuresimple/">Base</a>. Why? <a href="https://plus.google.com/104992412719307414985">+Jeff Gilfelt</a> summed it up nicely:</p>

<blockquote class="twitter-tweet" lang="en"><p>Because it is 2014 <a href="https://t.co/UCMaZOB6Sl">https://t.co/UCMaZOB6Sl</a></p>&mdash; Jeff Gilfelt (@readyState) <a href="https://twitter.com/readyState/statuses/435419373852184576">February 17, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>This tweet is a good laugh (and an excellent example of what happens if you limit the discussion to 140 characters), but there are poor souls who might need an answer they can use as an objective argument. For them, here is my take on this one: you should drop support for Froyo because sizeable chunk of Java 1.6 APIs were missing from API level 8. I&rsquo;m not talking about some dark corners of java packages, I&rsquo;m talking about stuff like <a href="http://developer.android.com/reference/java/lang/String.html#isEmpty%28%29"><code>String.isEmpty()</code></a>, <a href="http://developer.android.com/reference/java/util/Deque.html"><code>Deque</code></a>, <a href="http://developer.android.com/reference/java/util/NavigableSet.html"><code>NavigableSet</code></a>, <a href="http://developer.android.com/reference/java/io/IOException.html"><code>IOException</code></a>&rsquo;s constructors with cause parameter, <a href="http://developer.android.com/sdk/api_diff/9/changes/changes-summary.html">and so on</a>.</p>

<p>Your own code can (and should) be checked with Lint, but these methods and classes can also be used by the 3rd party libraries and I&rsquo;m not aware of any static analysis tool that can help you in this case. So if your app supports Froyo and uses a lot of external dependencies, you&rsquo;re probably sitting on the <a href="/blog/2013/06/26/guava-and-minsdkversion">NoClassDefFoundError bomb</a>. It might force you to use obsolete versions of libraries, the most notable example of which is Guava &ndash; on Froyo you have to use 13.0.1, a 18 months old version.</p>

<p>That&rsquo;s also the reason why the libraries authors should be the first ones to move on to Android 2.3 and later. If you use obsolete library in your application, you&rsquo;re hurting only yourself. If you use it as a library dependency, you&rsquo;re hurting every user of the library.</p>

<p>So move on and bump the minSdkVersion. After all, it&rsquo;s 2014.</p>
]]></content>
  </entry>
  
</feed>
