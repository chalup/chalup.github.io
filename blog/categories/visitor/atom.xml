<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Visitor | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/visitor/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-09-21T13:53:58+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Forger Library]]></title>
    <link href="http://chalup.github.io/blog/2013/09/12/forger-library/"/>
    <updated>2013-09-12T23:19:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/09/12/forger-library</id>
    <content type="html"><![CDATA[<p>Sometimes the code you write is hard to test, and the most likely reason for this is that you wrote a shitty code. Other times, the code is quite easy to test, but setting up the test fixture is extremely tedious. It may also mean that you wrote a shitty code, but it may also mean that you don&rsquo;t have the right tools.</p>

<p>For me the most painful part of writing tests was filling the data model with some fake data. The most straightforward thing to do is to write helper methods for creating this data, but this means you&rsquo;ll have two pieces of code to maintain side by side: the data model and the helper methods. The problem gets even more complicated when you need to create a whole hierarchy of objects.</p>

<p>The first step is generating a valid <a href="http://developer.android.com/reference/android/content/ContentValues.html"><code>ContentValues</code></a> for your data model. You need to know the column names and the type of the data that should be generated for a given column. Note that for column data type you cannot really use the database table definitions &ndash; for example sqlite doesn&rsquo;t have boolean column type, so you&rsquo;d define your column as integer, but the valid values for this column are only 1 and 0.</p>

<p>This is not enough though, because you&rsquo;d generate random values for the foreign keys, which might crash the app (if you enforce the foreign key constraints) or break some other invariants in your code. You might work around this by creating the objects in the right order and overriding generated data for foreign key columns, but this would be tedious and error prone solution.</p>

<p>I have recently posted about my two side-projects: <a href="https://github.com/chalup/microorm">MicroOrm</a> and <a href="https://github.com/chalup/thneed">Thneed</a>. The former let&rsquo;s you annotate fields in POJO and handles the conversion from POJO to ContentValues and from Cursor to POJO:</p>

<p>``` java
public class Customer {
  @Column(&ldquo;id&rdquo;)
  public long id;</p>

<p>  @Column(&ldquo;name&rdquo;)
  public String name;
}</p>

<p>public class Order {
  @Column(&ldquo;id&rdquo;)
  public long id;</p>

<p>  @Column(&ldquo;amount&rdquo;)
  public int amount;</p>

<p>  @Column(&ldquo;customer_id&rdquo;)
  public long customerId;
}
```</p>

<p>The latter allows you to define the relationships between entities in your data model:</p>

<p>``` java
ModelGraph<ModelInterface> modelGraph = ModelGraph.of(ModelInterface.class)</p>

<pre><code>.identifiedByDefault().by("id")
.where()
.the(ORDER).references(CUSTOMER).by("customer_id")
.build();
</code></pre>

<p>```</p>

<p>See what I&rsquo;m getting at?</p>

<p>The returned ModelGraph object is a data structure that can be processed by independently written processors, i.e. they are the Visitable and Visitor parts of the <a href="http://en.wikipedia.org/wiki/Visitor_pattern">visitor design pattern</a>. The entities in relationship definitions are not a plain marker Objects &ndash; the first builder call specifies the interface they have to implement. This interface can be used by Visitors to get useful information about the connected models and, as a type parameter of ModelGraph, ensures that you are using the correct Visitors for your ModelGraph. See <a href="/blog/2013/08/25/random-musings-on-visitor-design">my last post about Visitors</a> for more information about generifying the visitor pattern.</p>

<p>In our case the interface should declare which POJO contains <a href="https://github.com/chalup/microorm">MicroOrm</a> annotations and where should the generated <a href="http://developer.android.com/reference/android/content/ContentValues.html"><code>ContentValues</code></a> be inserted:</p>

<p>``` java
public interface MicroOrmModel {
  public Class&lt;?> getModelClass();
}</p>

<p>public interface ContentResolverModel {
  public Uri getUri();
}</p>

<p>interface ModelInterface extends ContentResolverModel, MicroOrmModel {
}</p>

<p>public static final ModelInterface CUSTOMER = new ModelInterface() {
  @Override
  public Uri getUri() {</p>

<pre><code>return Customers.CONTENT_URI;
</code></pre>

<p>  }</p>

<p>  @Override
  public Class&lt;?> getModelClass() {</p>

<pre><code>return Customer.class;
</code></pre>

<p>  }
}
```</p>

<p>The final step is to wrap everything in fluent API:</p>

<p>``` java
Forger<ModelInterface> forger = new Forger(modelGraph, new MicroOrm());
Order order = forger.iNeed(Order.class).in(contentResolver);</p>

<p>// note: we didn&rsquo;t created the Customer dependency of Order, but:
assertThat(order.customer_id).isNotEqualTo(0);</p>

<p>// of course we can create Customer first and then create Order for it:
Customer customer = forger.iNeed(Customer.class).in(contentResolver);
Order anotherOrder = forger.iNeed(Order.class).relatedTo(customer).in(contentResolver);</p>

<p>assertThat(anotherOrder.customer_id).isEqualTo(customer.id);</p>

<p>// or if we need multiple orders for the same customer:
Customer anotherCustomer = forger.iNeed(Customer.class).in(contentResolver);
Forger<ModelInterface> forgerWithContext = forger.inContextOf(anotherCustomer);</p>

<p>Order orderA = forgerWithContext.iNeed(Order.class).in(contentResolver);
Order orderB = forgerWithContext.iNeed(Order.class).in(contentResolver);</p>

<p>assertThat(orderA.customer_id).isEqualTo(anotherCustomer.id);
assertThat(orderB.customer_id).isEqualTo(anotherCustomer.id);
```</p>

<p>The most pathological case in our code base was a test with 10 lines of code calling over 100 lines of helper methods and 6 lines of the actual test logic. The <a href="https://github.com/futuresimple/forger">Forger</a> library allowed us to get rid of all the helper methods and reduce the 10 lines of setup to 1 fluent API call (it&rsquo;s quite a long call split into few lines, but it&rsquo;s much prettier than the original code).</p>

<p>Check out the <a href="https://github.com/futuresimple/forger">code on github</a> and don&rsquo;t <a href="https://github.com/futuresimple/forger/star">forget to star</a> this project if you find it interesting.</p>

<p>The funny thing about this project is that it&rsquo;s a byproduct of <a href="https://github.com/chalup/thneed">Thneed</a>, which I originally wrote to solve another problem. It makes me think that the whole idea of defining the relationships as a visitable structure is more flexible than I originally anticipated and it might become the cornerstone of the whole set of useful tools.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Random Musings on Visitor Design Pattern in Java]]></title>
    <link href="http://chalup.github.io/blog/2013/08/25/random-musings-on-visitor-design/"/>
    <updated>2013-08-25T13:21:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/08/25/random-musings-on-visitor-design</id>
    <content type="html"><![CDATA[<p>First let&rsquo;s have a quick refresher on what is the <a href="http://en.wikipedia.org/wiki/Visitor_pattern">visitor design pattern</a>. This pattern consists of two elements: the Visitor, which in the Gang of Four book is defined as an &ldquo;operation to be performed on the elements of an object structure&rdquo;; the second element is the structure itself.</p>

<p>``` java
public interface Visitable {
  void accept(Visitor visitor);
}</p>

<p>public interface Visitor {
}
```</p>

<p>The Visitor interface is for now empty, because we haven&rsquo;t declared any Visitable types. In every class implementing Visitable interface we&rsquo;ll call a different method in Visitor:</p>

<p>``` java
public interface Visitable {
  void accept(Visitor visitor);
}</p>

<p>public static class VisitableFoo implements Visitable {
  @Override
  public void accept(Visitor visitor) {</p>

<pre><code>visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public static class VisitableBar implements Visitable {
  @Override
  public void accept(Visitor visitor) {</p>

<pre><code>visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public interface Visitor {
  void visit(VisitableBar visitableBar);
  void visit(VisitableFoo visitableFoo);
}
```</p>

<p>Sounds like a lot of work, but there is a reason for it. You could achieve something similar by simply adding another method to the Visitable pattern, but this means you&rsquo;d have to be able to modify the Visitable classes. The visit/accept double dispatch allows you to write a library like <a href="https://github.com/chalup/thneed">Thneed</a>, which defines the data structure, but leaves the operations implementation to the library users.</p>

<p>The classic visitor pattern requires you to keep some kind of state and to write a method for getting and clearing this state. This might be what you want, but if you want to simply process your Visitable objects one by one and return independent computations, you might want just to return a value from visit() method. So the first twist you can add to classic Visitor pattern is to return a value from visit/accept method:</p>

<p>``` java
public interface Visitable {
  <TReturn> TReturn accept(Visitor<TReturn> visitor);
}</p>

<p>public static class VisitableFoo implements Visitable {
  @Override
  public <TReturn> TReturn accept(Visitor<TReturn> visitor) {</p>

<pre><code>return visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public static class VisitableBar implements Visitable {
  @Override
  public <TReturn> TReturn accept(Visitor<TReturn> visitor) {</p>

<pre><code>return visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public interface Visitor<TReturn> {
  TReturn visit(VisitableBar visitableBar);
  TReturn visit(VisitableFoo visitableFoo);
}
```</p>

<p>Note that only Visitor interface is parametrized with a return type. The only thing that <code>Visitable.accept()</code> do is dispatching the call to Visitor, so there is no point in generifying the whole interface, it&rsquo;s sufficient to make an accept method generic. In fact, making the TReturn type a Visitable interface type would be a design mistake, because you wouldn&rsquo;t be able to create a Visitable that could be accepted by Visitors with different return types:</p>

<p><code>java
public interface Visitable&lt;TReturn&gt; {&lt;br/&gt;  TReturn accept(Visitor&lt;TReturn&gt; visitor);&lt;br/&gt;}
</code></p>

<p>Because of type erasure you wouldn&rsquo;t be able to create a Visitable that can accept two Visitors returning a different types:</p>

<p><code>java
public static class MyVisitable implements Visitable&lt;String&gt;, Visitable&lt;Integer&gt; {
  // Invalid! "Duplicate class Visitable" compilation error.
}
</code></p>

<p>Another thing you can do is generifying the whole pattern. The use case for this is when your Visitables are some kind of containers or wrappers over objects (again, see the <a href="https://github.com/chalup/thneed">Thneed</a> library, where the Visitables subclasses are the different kinds of relationships between data models and are parametrized with the type representing the data models). The naive way to do this is just adding the type parameters:</p>

<p>``` java
public interface Visitable<T> {
  void accept(Visitor<T> visitor);
}</p>

<p>public static class VisitableFoo<T> implements Visitable<T> {
  @Override
  public void accept(Visitor<T> visitor) {</p>

<pre><code>visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public static class VisitableBar<T> implements Visitable<T> {
  @Override
  public void accept(Visitor<T> visitor) {</p>

<pre><code>visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public interface Visitor<T> {
  void visit(VisitableBar<T> visitableBar);
  void visit(VisitableFoo<T> visitableFoo);
}
```</p>

<p>There is a problem with the signatures of those interfaces. Let&rsquo;s say that we want our Visitor to operate on Visitables containing Numbers:</p>

<p>``` java
Visitor<Number> visitor = new Visitor<Number>() {
  @Override
  public void visit(VisitableBar<Number> visitableBar) {
  }</p>

<p>  @Override
  public void visit(VisitableFoo<Number> visitableFoo) {
  }
};
```</p>

<p>You should think about Visitor as the method accepting the Visitable. If our Visitor can handle something that contains Number, it should also handle something that contain any Number subclass &ndash; it&rsquo;s a classic example of <a href="https://sites.google.com/site/io/effective-java-reloaded">&ldquo;consumer extends, producer super&rdquo;</a> behaviour or <a href="http://en.wikipedia.org/wiki/Covariance_and_contravariance_(computer_science">covariance and contravariance</a>) in general. In the implementation above however, the strict generics types are causing compilation errors. <a href="http://docs.oracle.com/javase/tutorial/extra/generics/wildcards.html">Generics wildcards</a> to the rescue:</p>

<p>``` java
public interface Visitable<T> {
  void accept(Visitor&lt;? super T> visitor);
}</p>

<p>public static class VisitableFoo<T> implements Visitable<T> {
  @Override
  public void accept(Visitor&lt;? super T> visitor) {</p>

<pre><code>visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public static class VisitableBar<T> implements Visitable<T> {
  @Override
  public void accept(Visitor&lt;? super T> visitor) {</p>

<pre><code>visitor.visit(this);
</code></pre>

<p>  }
}</p>

<p>public interface Visitor<T> {
  void visit(VisitableBar&lt;? extends T> visitableBar);
  void visit(VisitableFoo&lt;? extends T> visitableFoo);
}
```</p>

<p>Note that the change has to be symmetric, i.e. both the <code>accept()</code> and <code>visit()</code> signatures have to include the bounds. Now we can safely call:</p>

<p>``` java
VisitableBar<Integer> visitableBar = new VisitableBar<Integer>();
Visitor<Number> visitor = new Visitor<Number>() {
  // visit() implementations
}</p>

<p>visitableBar.accept(visitor);
```</p>
]]></content>
  </entry>
  
</feed>
