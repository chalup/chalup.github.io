<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MicroOrm | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/microorm/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-09-21T13:53:58+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Use minSdkVersion=10 for Libraries]]></title>
    <link href="http://chalup.github.io/blog/2014/02/25/use-minsdkversion10-for-libraries/"/>
    <updated>2014-02-25T21:42:00+01:00</updated>
    <id>http://chalup.github.io/blog/2014/02/25/use-minsdkversion10-for-libraries</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve pushed new versions of <a href="https://github.com/chalup/microorm">microorm</a> and <a href="https://github.com/chalup/thneed">thneed</a> to Maven Central today. The most notable change for both libraries is dropping the support for Android 2.2 and earlier versions. The same change was applied to all Android libraries open sourced by <a href="https://github.com/orgs/futuresimple/">Base</a>. Why? <a href="https://plus.google.com/104992412719307414985">+Jeff Gilfelt</a> summed it up nicely:</p>

<blockquote class="twitter-tweet" lang="en"><p>Because it is 2014 <a href="https://t.co/UCMaZOB6Sl">https://t.co/UCMaZOB6Sl</a></p>&mdash; Jeff Gilfelt (@readyState) <a href="https://twitter.com/readyState/statuses/435419373852184576">February 17, 2014</a></blockquote>


<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>This tweet is a good laugh (and an excellent example of what happens if you limit the discussion to 140 characters), but there are poor souls who might need an answer they can use as an objective argument. For them, here is my take on this one: you should drop support for Froyo because sizeable chunk of Java 1.6 APIs were missing from API level 8. I&rsquo;m not talking about some dark corners of java packages, I&rsquo;m talking about stuff like <a href="http://developer.android.com/reference/java/lang/String.html#isEmpty%28%29"><code>String.isEmpty()</code></a>, <a href="http://developer.android.com/reference/java/util/Deque.html"><code>Deque</code></a>, <a href="http://developer.android.com/reference/java/util/NavigableSet.html"><code>NavigableSet</code></a>, <a href="http://developer.android.com/reference/java/io/IOException.html"><code>IOException</code></a>&rsquo;s constructors with cause parameter, <a href="http://developer.android.com/sdk/api_diff/9/changes/changes-summary.html">and so on</a>.</p>

<p>Your own code can (and should) be checked with Lint, but these methods and classes can also be used by the 3rd party libraries and I&rsquo;m not aware of any static analysis tool that can help you in this case. So if your app supports Froyo and uses a lot of external dependencies, you&rsquo;re probably sitting on the <a href="/blog/2013/06/26/guava-and-minsdkversion">NoClassDefFoundError bomb</a>. It might force you to use obsolete versions of libraries, the most notable example of which is Guava &ndash; on Froyo you have to use 13.0.1, a 18 months old version.</p>

<p>That&rsquo;s also the reason why the libraries authors should be the first ones to move on to Android 2.3 and later. If you use obsolete library in your application, you&rsquo;re hurting only yourself. If you use it as a library dependency, you&rsquo;re hurting every user of the library.</p>

<p>So move on and bump the minSdkVersion. After all, it&rsquo;s 2014.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forger Library]]></title>
    <link href="http://chalup.github.io/blog/2013/09/12/forger-library/"/>
    <updated>2013-09-12T23:19:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/09/12/forger-library</id>
    <content type="html"><![CDATA[<p>Sometimes the code you write is hard to test, and the most likely reason for this is that you wrote a shitty code. Other times, the code is quite easy to test, but setting up the test fixture is extremely tedious. It may also mean that you wrote a shitty code, but it may also mean that you don&rsquo;t have the right tools.</p>

<p>For me the most painful part of writing tests was filling the data model with some fake data. The most straightforward thing to do is to write helper methods for creating this data, but this means you&rsquo;ll have two pieces of code to maintain side by side: the data model and the helper methods. The problem gets even more complicated when you need to create a whole hierarchy of objects.</p>

<p>The first step is generating a valid <a href="http://developer.android.com/reference/android/content/ContentValues.html"><code>ContentValues</code></a> for your data model. You need to know the column names and the type of the data that should be generated for a given column. Note that for column data type you cannot really use the database table definitions &ndash; for example sqlite doesn&rsquo;t have boolean column type, so you&rsquo;d define your column as integer, but the valid values for this column are only 1 and 0.</p>

<p>This is not enough though, because you&rsquo;d generate random values for the foreign keys, which might crash the app (if you enforce the foreign key constraints) or break some other invariants in your code. You might work around this by creating the objects in the right order and overriding generated data for foreign key columns, but this would be tedious and error prone solution.</p>

<p>I have recently posted about my two side-projects: <a href="https://github.com/chalup/microorm">MicroOrm</a> and <a href="https://github.com/chalup/thneed">Thneed</a>. The former let&rsquo;s you annotate fields in POJO and handles the conversion from POJO to ContentValues and from Cursor to POJO:</p>

<p>``` java
public class Customer {
  @Column(&ldquo;id&rdquo;)
  public long id;</p>

<p>  @Column(&ldquo;name&rdquo;)
  public String name;
}</p>

<p>public class Order {
  @Column(&ldquo;id&rdquo;)
  public long id;</p>

<p>  @Column(&ldquo;amount&rdquo;)
  public int amount;</p>

<p>  @Column(&ldquo;customer_id&rdquo;)
  public long customerId;
}
```</p>

<p>The latter allows you to define the relationships between entities in your data model:</p>

<p>``` java
ModelGraph<ModelInterface> modelGraph = ModelGraph.of(ModelInterface.class)</p>

<pre><code>.identifiedByDefault().by("id")
.where()
.the(ORDER).references(CUSTOMER).by("customer_id")
.build();
</code></pre>

<p>```</p>

<p>See what I&rsquo;m getting at?</p>

<p>The returned ModelGraph object is a data structure that can be processed by independently written processors, i.e. they are the Visitable and Visitor parts of the <a href="http://en.wikipedia.org/wiki/Visitor_pattern">visitor design pattern</a>. The entities in relationship definitions are not a plain marker Objects &ndash; the first builder call specifies the interface they have to implement. This interface can be used by Visitors to get useful information about the connected models and, as a type parameter of ModelGraph, ensures that you are using the correct Visitors for your ModelGraph. See <a href="/blog/2013/08/25/random-musings-on-visitor-design">my last post about Visitors</a> for more information about generifying the visitor pattern.</p>

<p>In our case the interface should declare which POJO contains <a href="https://github.com/chalup/microorm">MicroOrm</a> annotations and where should the generated <a href="http://developer.android.com/reference/android/content/ContentValues.html"><code>ContentValues</code></a> be inserted:</p>

<p>``` java
public interface MicroOrmModel {
  public Class&lt;?> getModelClass();
}</p>

<p>public interface ContentResolverModel {
  public Uri getUri();
}</p>

<p>interface ModelInterface extends ContentResolverModel, MicroOrmModel {
}</p>

<p>public static final ModelInterface CUSTOMER = new ModelInterface() {
  @Override
  public Uri getUri() {</p>

<pre><code>return Customers.CONTENT_URI;
</code></pre>

<p>  }</p>

<p>  @Override
  public Class&lt;?> getModelClass() {</p>

<pre><code>return Customer.class;
</code></pre>

<p>  }
}
```</p>

<p>The final step is to wrap everything in fluent API:</p>

<p>``` java
Forger<ModelInterface> forger = new Forger(modelGraph, new MicroOrm());
Order order = forger.iNeed(Order.class).in(contentResolver);</p>

<p>// note: we didn&rsquo;t created the Customer dependency of Order, but:
assertThat(order.customer_id).isNotEqualTo(0);</p>

<p>// of course we can create Customer first and then create Order for it:
Customer customer = forger.iNeed(Customer.class).in(contentResolver);
Order anotherOrder = forger.iNeed(Order.class).relatedTo(customer).in(contentResolver);</p>

<p>assertThat(anotherOrder.customer_id).isEqualTo(customer.id);</p>

<p>// or if we need multiple orders for the same customer:
Customer anotherCustomer = forger.iNeed(Customer.class).in(contentResolver);
Forger<ModelInterface> forgerWithContext = forger.inContextOf(anotherCustomer);</p>

<p>Order orderA = forgerWithContext.iNeed(Order.class).in(contentResolver);
Order orderB = forgerWithContext.iNeed(Order.class).in(contentResolver);</p>

<p>assertThat(orderA.customer_id).isEqualTo(anotherCustomer.id);
assertThat(orderB.customer_id).isEqualTo(anotherCustomer.id);
```</p>

<p>The most pathological case in our code base was a test with 10 lines of code calling over 100 lines of helper methods and 6 lines of the actual test logic. The <a href="https://github.com/futuresimple/forger">Forger</a> library allowed us to get rid of all the helper methods and reduce the 10 lines of setup to 1 fluent API call (it&rsquo;s quite a long call split into few lines, but it&rsquo;s much prettier than the original code).</p>

<p>Check out the <a href="https://github.com/futuresimple/forger">code on github</a> and don&rsquo;t <a href="https://github.com/futuresimple/forger/star">forget to star</a> this project if you find it interesting.</p>

<p>The funny thing about this project is that it&rsquo;s a byproduct of <a href="https://github.com/chalup/thneed">Thneed</a>, which I originally wrote to solve another problem. It makes me think that the whole idea of defining the relationships as a visitable structure is more flexible than I originally anticipated and it might become the cornerstone of the whole set of useful tools.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MicroOrm and Thneed Available on Maven Central]]></title>
    <link href="http://chalup.github.io/blog/2013/08/17/microorm-and-thneed-available-on-maven/"/>
    <updated>2013-08-17T21:56:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/08/17/microorm-and-thneed-available-on-maven</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve uploaded my two experimental projects, <a href="https://github.com/chalup/microorm">MicroOrm</a> and <a href="https://github.com/chalup/thneed">Thneed</a>, to <a href="http://search.maven.org/#search%7Cga%7C1%7Corg.chalup">Maven Central</a>. If you want to try them out, just add the following lines to your pom.xml:</p>

<p>``` xml
<dependency>
  <groupId>org.chalup.thneed</groupId>
  <artifactId>thneed</artifactId>
  <version>0.3</version>
</dependency></p>

<p><dependency>
  <groupId>org.chalup.microorm</groupId>
  <artifactId>microorm</artifactId>
  <version>0.2</version>
</dependency>
```</p>

<p>Don&rsquo;t hesitate to <a href="mailto:jerzy.chalupski@gmail.com"><code>email me</code></a>, create an issue on github or propose a pull request. Any form of feedback is welcome!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thneed Library]]></title>
    <link href="http://chalup.github.io/blog/2013/08/15/thneed-library/"/>
    <updated>2013-08-15T23:32:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/08/15/thneed-library</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/chalup/microorm">MicroOrm</a> library I started <a href="/blog/2013/05/28/weekend-hack-microorm-library">a while ago</a> solves only a tiny part of data model related problems &ndash; conversion between strongly typed objects and storage classes specific for Android. We discussed few existing libraries for data model implementation we might use at <a href="http://getbase.com/">Base CRM</a>, but we were not fully satisfied with any of them. There are two approaches to this problem:</p>

<p>The first approach is to define the Data Access Objects / entity objects and create SQLite tables using this data. Almost every ORM solution for Android works this way. The deal breaker for those solutions is the complete disregard for data migrations. The <a href="http://ormlite.com/javadoc/ormlite-core/doc-files/ormlite_4.html#Upgrading-Schema">ORMLite docs</a> suggest that you should just fall back to the raw queries, but this means that you need to know the schema generated from DAOs, which is a classic case of <a href="http://www.joelonsoftware.com/articles/LeakyAbstractions.html">leaky abstraction</a>.</p>

<p>The completely opposite approach is used in <a href="http://robotoworks.com/mechanoid/doc/db/">Mechanoid library</a>. You define the database schema as a sequence of migrations and the library generates the DAOs and some other stuff. I was initially very excited about this project, but it&rsquo;s in a very early state of development and the commit activity is not very high. The main problem with this concept is extensibility and customization. For both you probably have to change the way the code is generated from parsed SQLite schema. We also have some project specific issues that would makes this project hard to use.</p>

<p>At the end we haven&rsquo;t found an acceptable solution among existing libraries and frameworks, but something good came out of our discussions. The sentence which came up again and again was &ldquo;It wouldn&rsquo;t be too hard to implement if we knew the relationships between our models&rdquo;. Wait a minute, we do know these relationships! We just need a way to represent them in the Java code!</p>

<p>And so, the <a href="https://github.com/chalup/thneed">Thneed</a> was born.</p>

<p>By itself the Thneed doesn&rsquo;t do anything useful &ndash; it just lets you tell that one X has many Ys and so on, to create a relationship graph of your data models. The trick is, this graph is a Visitable part of <a href="http://en.wikipedia.org/wiki/Visitor_pattern">Visitor design pattern</a>, which means that you can write any number of Visitors to do something useful with the information about declared relationships (see the <a href="https://github.com/chalup/thneed/blob/master/README.md">project&rsquo;s readme</a> for some ideas). Think about it as a tool for creating other tools.</p>

<p>The project is in a very early stage, but I&rsquo;ve already started <a href="https://github.com/futuresimple/forger">another project</a> on top of Thneed and at this point the general idea seems sound. I&rsquo;ve also learned few tricks I&rsquo;ll write about in a little while. As usual, the feedback is welcome, and if you find this idea interesting, do not hesitate to <a href="https://github.com/chalup/thneed/star">star</a> the project <a href="https://github.com/chalup/thneed/">on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MicroOrm API Established]]></title>
    <link href="http://chalup.github.io/blog/2013/06/04/microorm-api-established/"/>
    <updated>2013-06-04T21:51:00+02:00</updated>
    <id>http://chalup.github.io/blog/2013/06/04/microorm-api-established</id>
    <content type="html"><![CDATA[<p>Last weekend I have found some time again to work on the <a href="https://github.com/chalup/microorm">MicroOrm</a>. Basically it&rsquo;s something like google-gson for Android database types &ndash; <a href="http://developer.android.com/reference/android/database/Cursor.html"><code>Cursors</code></a> and <a href="http://developer.android.com/reference/android/content/ContentValues.html"><code>ContentValues</code></a>.</p>

<p>With help from <a href="http://plus.google.com/108555637824110226040">+Mateusz Herych</a> and <a href="http://plus.google.com/104340031708315230732">+Bartek Filipowicz</a> I have, hopefully, finalized the API of the v1.0. The <a href="/blog/2013/05/28/weekend-hack-microorm-library">initial draft of the library</a> supported only basic field types: primitives and their boxed equivalents and of course strings. The current version allows registering adapters for any non-generic types. <a href="http://plus.google.com/108555637824110226040">+Mateusz Herych</a> added also the <code>@Embedded</code> annotation which allows easy nesting of POJOs which are represented by multiple columns.</p>

<p>Those two mechanisms should allow you to write the entity objects for almost any data structure you have.The only unsupported cases are generic entities and generic fields in entities. I decided to leave them out of the first release, because due to type erasure in java the implementation is not straightforward and I don&rsquo;t have such cases anywhere in my code anyways.</p>

<p>The next step is using the library in the existing project. I intend to use it in <a href="http://getbase.com/">Base CRM</a>, which should be sufficiently large project to reveal any <a href="https://github.com/chalup/microorm">MicroOrm&rsquo;s</a> shortcomings.</p>
]]></content>
  </entry>
  
</feed>
