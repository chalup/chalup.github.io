<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Nokia | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/nokia/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-06-27T22:53:56+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Screensaver Blocking on Symbian]]></title>
    <link href="http://chalup.github.io/blog/2012/10/03/screensaver-blocking-on-symbian/"/>
    <updated>2012-10-03T20:55:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/10/03/screensaver-blocking-on-symbian</id>
    <content type="html"><![CDATA[<p>In my <a href="http://store.ovi.com/content/318428">latest game</a> the players spend significant amount of time just watching the screen and trying to figure the puzzle out. The first few levels are obvious and most players will sole them in a few seconds, but as the difficulty of the puzzles increases the players stare at the screen longer and longer. At some point the screensaver would kick in and piss the player off (fortunately my ragtag QA/betatester team found this issue before launch).</p>

<p><a href="https://www.google.com/search?q=how+to+block+screensaver+symbian+qt">Google search results</a> are (as usual) helpful, but the most promising lead, the <a href="http://doc.qt.digia.com/qtmobility/qsystemscreensaver.html"><code>QSystemScreenSaver</code></a> class is not a solution. There are three problems with it:</p>

<ol>
<li>The API of the class itself is terrible.</li>
<li>The API of the <a href="http://doc.qt.digia.com/qtmobility/qml-screensaver.html">related QML element</a> is even worse.</li>
<li>Last, but not least, it doesn&rsquo;t work (at least not in the Qt Mobility version shipped with the Qt SDK).</li>
</ol>


<p>(BTW: these three points sums up pretty much every experience with Qt Mobility package I had. Qt devs should either kill this festering boil with fire or fix it and rename it, because I learned to dread everything remotely related to Qt Mobility, and I suspect I&rsquo;m not the only one).</p>

<p>Anyways, let&rsquo;s get back to the core of the problem, i.e. &ldquo;how to block the screensaver&rdquo;. Qt Mobility failed, but the task doesn&rsquo;t seems like a rocket science to me. <a href="https://www.google.com/search?q=how+to+block+screensaver+s60+c%2B%2B">Slightly different Google search</a> suggested using native Symbian&rsquo;s <a href="http://library.developer.nokia.com/topic/Nokia_Belle_Developers_Library/GUID-C6E5F800-0637-419E-8FE5-1EBB40E725AA/GUID-C197C9A7-EA05-3F24-9854-542E984C612D.html#GUID-A98E1B31-00E0-3DF1-8D5A-8E815B073D81"><code>User::ResetInactivityTime()</code></a> method. Few minutes and one <code>QTimer</code> later, everything worked:</p>

<p>``` c++</p>

<h1>ifndef SCREENSAVERBLOCKER_H</h1>

<h1>define SCREENSAVERBLOCKER_H</h1>

<h1>include <QObject></h1>

<h1>include <QApplication></h1>

<h1>include <QTimer></h1>

<p>class ScreenSaverBlocker : public QObject
{</p>

<pre><code>Q_OBJECT
</code></pre>

<p>public:</p>

<pre><code>explicit ScreenSaverBlocker(QObject *parent = 0) : QObject(parent) {
    mTimer.setInterval(1000);
    connect(&amp;mTimer, SIGNAL(timeout()), this, SLOT(blockScreenSaver()));
    changeScreenSaverState(QApplication::activeWindow() != 0);
    if (qApp) {
        qApp-&gt;installEventFilter(this);
    }
}

void changeScreenSaverState(bool blockScreenSaver) {
    if (blockScreenSaver &amp;&amp; !mTimer.isActive()) {
        mTimer.start();
    } else {
        mTimer.stop();
    }
}
</code></pre>

<p>protected:</p>

<pre><code>bool eventFilter(QObject *obj, QEvent *event) {
    Q_UNUSED(obj)
    if (event-&gt;type() == QEvent::ApplicationActivate
     || event-&gt;type() == QEvent::ApplicationDeactivate) {
        changeScreenSaverState(event-&gt;type() == QEvent::ApplicationActivate);
    }
    return false;
}
</code></pre>

<p>private slots:</p>

<pre><code>void blockScreenSaver() {
</code></pre>

<h1>ifdef Q_OS_SYMBIAN</h1>

<pre><code>    User::ResetInactivityTime();
</code></pre>

<h1>endif</h1>

<pre><code>}
</code></pre>

<p>private:</p>

<pre><code>QTimer mTimer;
</code></pre>

<p>};</p>

<h1>endif // SCREENSAVERBLOCKER_H</h1>

<p>```</p>

<p>The important thing in the code above is watching the <code>ApplicationActivate</code> and <code>ApplicationDeactivate</code> events &ndash; after all, when your app is in background, you shouldn&rsquo;t affect the phone behavior. I&rsquo;m not sure if the app would fail the Nokia&rsquo;s QA process without this feature, but it seemed prudent to write the code this way.</p>

<p>If you want to use this object in your QML UI just register it with <a href="http://doc.qt.digia.com/4.7/qdeclarativeengine.html#qmlRegisterType"><code>qmlRegisterType</code></a> and add the registered import and QML element to your root element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screen Orientation and QT Applications on Symbian Belle]]></title>
    <link href="http://chalup.github.io/blog/2012/09/12/screen-orientation-and-qt-applications/"/>
    <updated>2012-09-12T22:05:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/09/12/screen-orientation-and-qt-applications</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s take a break from <a href="/blog/2012/08/30/custom-scrollbar-graphics-in-android">Android</a> <a href="/blog/2012/09/05/android-sharedpreferences-gotcha">gotchas</a> and do some mobile necrophilia, i.e. let&rsquo;s talk about Symbian.</p>

<p>Recently I received an email from Nokians saying that they are testing Nokia Store content with new firmware update and <a href="http://store.ovi.com/content/219800">my app</a> won&rsquo;t work after update. After few quick email exchanges we narrowed down the problem to <a href="/blog/2012/05/30/qml-applications-on-nokia-belle">screen orientation locking code I wrote about some time ago</a>. It turns out that things can be done much simpler:</p>

<p>``` js
Window {</p>

<pre><code>Rectangle {
    id: root
    anchors.fill: parent

    Component.onCompleted: {
        screen.allowedOrientations = Screen.Landscape
    }

    // more stuff
}
</code></pre>

<p>}
```</p>

<p>``` c++
int main(int argc, char *argv[])
{</p>

<pre><code>QScopedPointer&lt;QApplication&gt; app(createApplication(argc, argv));

QmlApplicationViewer viewer;
viewer.setMainQmlFile(QLatin1String("qml/nupagadi/GameArea.qml"));
viewer.setOrientation(QmlApplicationViewer::ScreenOrientationLockLandscape);
viewer.setResizeMode(QDeclarativeView::SizeRootObjectToView);
viewer.showExpanded();

return app-&gt;exec();
</code></pre>

<p>}
```</p>

<p>Less code, no need to comment it as a gotcha/workaround, and it&rsquo;s supposedly futureproof.</p>

<p>I&rsquo;m very positively surprised with Nokians' approach, responsiveness and this whole experience. Of course I wouldn&rsquo;t be me if I didn&rsquo;t bitch a little bit, namely: why did I have this problem in the first place? I mean, locking the screen orientation is not a rocket science and should be well documented. It should, but unfortunately it&rsquo;s not, like so many things about QML.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QML Applications on Nokia Belle]]></title>
    <link href="http://chalup.github.io/blog/2012/05/30/qml-applications-on-nokia-belle/"/>
    <updated>2012-05-30T20:06:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/05/30/qml-applications-on-nokia-belle</id>
    <content type="html"><![CDATA[<p>After the latest update of &ldquo;Nu, Pogodi!&rdquo;, I received few negative reviews saying that the game doesn&rsquo;t work. I&rsquo;ve tested the game thoroughly on all devices I was able to get my hands on, but I wasn&rsquo;t able to reproduce the error, so I decided to wait until I get more info. Few days ago with the help of one customer I was able to pin down the problem &ndash; the game failed to display any UI on new Belle firmware with Qt 4.8.0. I don&rsquo;t have such device myself, but fortunately the great <a href="http://www.developer.nokia.com/Devices/Remote_device_access/">Remote Device Access</a> service allows testing on Nokia 808 PureView with latest Belle firmware. I&rsquo;ve reproduced the error, wrote the Nokia Developers Support, and they sent me a very helpful link: <a href="http://www.developer.nokia.com/Community/Wiki/Changes_in_Symbian_Belle_and_Qt_4.7.4#Changes_in_Nokia_Belle_FP1">Changes in Nokia Belle FP1</a>. One issue listed there caught my eye:</p>

<p>{% blockquote %}
If application does not specify a size for the root QML object and doesnâ€™t use the Qt components Window as root element (Window component should not be used as a child item), it might cause the root window not to be shown.</p>

<p><b>Solution / Workaround:</b>
Always declare a size for your custom QML root element.
{% endblockquote %}</p>

<p>I&rsquo;ve checked my main QML file and indeed, I did not set the root element size, instead I&rsquo;ve set the resize mode to SizeRootObjectToView and maximized the QDeclarativeView. I think it&rsquo;s the better solution than setting the root element size explicitly, because the display resolution is not the same on all Nokia phones (I&rsquo;m looking at you, E6). Instead of doing that, I wrapped my entire UI into Window element from Qt Components and lo and behold, my game displayed something, although it wasn&rsquo;t exactly what I expected:</p>

<p>{% img center /images/Nokia+808+PureView.png %}</p>

<p>My code locked the screen orientation after loading main QML file, and it looked like the only thing that might cause this problem, so I changed the calls order. On Belle FP1 devices everything worked fine, but this change broke the display on devices with Anna and older Belle firmware:</p>

<p>{% img center /images/Nokia+N8-00.png %}</p>

<p>Wat? The only solution I came up with was creating the utility method for detecting version of Qt during runtime and locking screen orientation after and before loading main QML file, depending on the Qt version. Relevant piece of code:</p>

<p>``` c++
bool Utils::runtimeQtAtLeast(int major, int minor, int bugfix)
{</p>

<pre><code>const QStringList v = QString::fromAscii(qVersion()).split(QLatin1Char('.'));
if (v.count() == 3) {
    int runtimeVersion = v.at(0).toInt() &lt;&lt; 16 | v.at(1).toInt() &lt;&lt; 8 | v.at(2).toInt();
    int version = major &lt;&lt; 16 | minor &lt;&lt; 8 | bugfix;
    return version &lt;= runtimeVersion;
}
return false;
</code></pre>

<p>}</p>

<p>// &hellip;</p>

<p>const bool qt48 = Utils::runtimeQtAtLeast(4,8,0);
QmlApplicationViewer viewer;
if (qt48) {</p>

<pre><code>viewer.setOrientation(QmlApplicationViewer::ScreenOrientationLockLandscape);
viewer.setResizeMode(QDeclarativeView::SizeRootObjectToView);
</code></pre>

<p>}</p>

<p>viewer.setMainQmlFile(QLatin1String(&ldquo;qml/nupagadi/GameArea.qml&rdquo;));</p>

<p>if (!qt48) {</p>

<pre><code>viewer.setOrientation(QmlApplicationViewer::ScreenOrientationLockLandscape);
viewer.setResizeMode(QDeclarativeView::SizeRootObjectToView);
</code></pre>

<p>}
```</p>

<p>This kind of incompatibility between <strong>minor</strong> versions of the Qt framework is mind boggling. It makes me think what else did Nokia screw up in Qt 4.8.0 for Symbian and what will they screw up in the next firmware updates. One thing is sure: I&rsquo;ll have a lot of blogging material.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Nu, Pogodi!" Bought by Over 2000 Users]]></title>
    <link href="http://chalup.github.io/blog/2012/02/24/nu-pogodi-bought-by-over-2000-users/"/>
    <updated>2012-02-24T22:53:00+01:00</updated>
    <id>http://chalup.github.io/blog/2012/02/24/nu-pogodi-bought-by-over-2000-users</id>
    <content type="html"><![CDATA[<p>This week my <a href="http://store.ovi.com/content/219800">&ldquo;Nu, Pogodi!&rdquo;</a> game reached the 2000 downloads from Nokia Store. It might not be a lot if you compare it to the number of Angry Birds downloads, but considering that a) the game is paid, i.e. those 2000 Nokia phone users actually spent their money on my game, and b) it took about two weeks total to program it, I think it&rsquo;s a very good result.</p>

<p>Despite the fact that the game is very simple, <a href="/blog/2012/01/22/how-not-to-test-your-qml-application">I&rsquo;ve learned</a> <a href="/blog/2012/01/31/updating-qt-applications-in-nokia-store/">a lot</a> <a href="/blog/2012/02/01/handling-qml-errors-101">while writing</a> <a href="/blog/2012/02/23/nokia-belle-update-and-content">and publishing it</a>, which makes me very excited about the next, more complex programs I&rsquo;m going to release and gives me enormous motivation boost. Now I just need to get to keep working before it wears off.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nokia Belle Update and Content Published in Nokia Store]]></title>
    <link href="http://chalup.github.io/blog/2012/02/23/nokia-belle-update-and-content/"/>
    <updated>2012-02-23T16:22:00+01:00</updated>
    <id>http://chalup.github.io/blog/2012/02/23/nokia-belle-update-and-content</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve received an email from &ldquo;Nu, Pogodi!&rdquo; customer, saying that he cannot <a href="http://store.ovi.com/content/219800">download my game from Nokia Store</a> after updating his N8 phone firmware to Symbian Belle. After quick investigation in turned out that the N8 Belle device was listed as &ldquo;Not compatible&rdquo; in content distribution details.</p>

<p>When I published my game in November, the only devices running with Belle firmware were Nokia 603, 700 and 701. When the Belle update for various phones was released, the new firmwares were added to the list as &ldquo;Not compatible&rdquo;, because that&rsquo;s the only reasonable default. It&rsquo;s prudent to prevent users from downloading application that might not work, because it&rsquo;s very likely that in case of any errors they&rsquo;ll post a negative review, and it&rsquo;s very hard to bump your rating from 1 or 2 stars average. I verified that everything works fine and updated the distribution metadata.</p>

<p>So here&rsquo;s the piece of advice for anyone who published some content in Nokia Store: periodically check if there are new firmwares available and update your content distribution.</p>
]]></content>
  </entry>
  
</feed>
