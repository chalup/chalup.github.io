<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-09-05T22:38:26+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On Git]]></title>
    <link href="http://chalup.github.io/blog/2014/06/20/on-git-ui/"/>
    <updated>2014-06-20T13:40:12+02:00</updated>
    <id>http://chalup.github.io/blog/2014/06/20/on-git-ui</id>
    <content type="html"><![CDATA[<p>As madeupstatistics.com report, 95% posts about git can be divided into three types:</p>

<ol>
<li><p>Whining about rebases, because &ldquo;git history is a bunch of lies&rdquo;.</p>

<p>   Right, because everyone needs to see your &ldquo;fixed typo&rdquo; mistakes and early API design blunders.</p></li>
<li><p>Whining about rebases, because you should document the &ldquo;roads not taken&rdquo;, not obliterate them.</p>

<p> This argument is actually pretty good, but from my experience these not taken roads, dead ends and detours do not tell the full story either. VCS is not the right tool for this.</p></li>
<li><p>Whining about crappy CLI command names.</p>

<p> It&rsquo;s hard to defend some choices, but here&rsquo;s the thing: you need to memorize maybe a dozen commands and in return you get the most powerful VCS tool you can get today. So toughen up princess, stop whining and learn them.</p></li>
</ol>


<p>So today I was pleasantly surprised when I found today actually a <a href="http://tonsky.me/blog/reinventing-git-interface/">good blog post about git UI</a>. Go ahead and read it. While I do not agree with everything OP wrote, he got two things right: git model and <code>git log --graph</code> improvements.</p>

<p><img class="center <a" src="href="http://tonsky.me/blog/reinventing-git-interface/overview@2x.png">http://tonsky.me/blog/reinventing-git-interface/overview@2x.png</a>"></p>

<h2>Git Mental Model</h2>

<p>People do not need to know that there are blobs, sha checksum calculated from whatnot and so one. What I say to every git newcomer is this: <strong>commits are connected with parent commits, and branches, tags, HEAD, etc. are all just pointers to commits</strong>. Then you just need to figure out that <code>git commit</code> doesn&rsquo;t do any magic, it just adds commit and moves HEAD and current branch pointers.</p>

<h2>Commits Graph Representation</h2>

<p>Every git workflow description contain a beautiful, clear diagram explaining where commits are added and merged &ndash; <a href="http://nvie.com/posts/a-successful-git-branching-model/">this is a good example</a>. Then you start using this workflow and after two weeks your <code>git log --graph --all</code> output looks like a failed knitting experiment. The difference is that the diagrams keep the commits from a single branch aligned in a column, and <code>git log</code> tries to reduce the space taken by graph, which mixes multiple branches in a single column.</p>

<p>I&rsquo;m not sure if it&rsquo;s doable with current git data model though &ndash; the commits do not contain any information about the branch. I think the branch name could be derived from the current branches and merge commits messages, but I&rsquo;m sure it won&rsquo;t work for 100% of cases. For these edge cases it would be great to allow users to manually select the correct branch, but this means the branch information would have to be kept outside of commits, but inside git. Tricky stuff.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Killer Feature: Content Tracking]]></title>
    <link href="http://chalup.github.io/blog/2012/04/17/git-killer-feature-content-tracking/"/>
    <updated>2012-04-17T16:20:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/04/17/git-killer-feature-content-tracking</id>
    <content type="html"><![CDATA[<p>At my current day job I was the first adopter of git and one of the most frequently question I&rsquo;m asked as &ldquo;the git guy&rdquo; is the variation of &ldquo;why do you use git instead of mercurial?&rdquo;. I usually responded that git was the first distributed VCS I used, and I played for a while with hg and bazaar, but I haven&rsquo;t discovered any significant feature that would make me change my initial choice. Today I have found the case that allows me to give a better answer.</p>

<p>About a month ago I released the <a href="https://play.google.com/store/apps/details?id=com.chalup.WordJudgeEN">Word Judge</a> application &ndash; an offline word validator for Scrabble and other word games. Initially I was working only on one version of Word Judge with polish dictionary, so I had one line of code in my git repository:</p>

<p><img class="center" src="/images/1.png"></p>

<p>When polish version was ready, I decided that I might as well release the english version, because it would require only minor changes: changing app icon and dictionary file. It turned out that I also have to change the application package, so both versions of Word Judge could be installed at the same time. The changes were in fact minor, but included a lot of renaming (package name is mirrored by the directory structure):</p>

<p><img class="center" src="/images/2.png"></p>

<p>Later on I decided to add ads to my application. First, I&rsquo;ve added the necessary code to master (i.e. polish) branch:</p>

<p><img class="center" src="/images/3.png"></p>

<p>I switched to english branch, typed <code>git merge master --no-commit</code>, and was very surprised to see just a few conflicts in binary files (icons). All the changes made in java code, <strong>in the renamed files</strong>, were automatically merged. If you still don&rsquo;t get how awesome this is, consider what would I had to do without it:</p>

<ol>
<li>Start the merge</li>
<li>Resolve the conflict by selecting &ldquo;keep deleted files&rdquo; for every java file changed in the master branch</li>
<li>Manually merge every java file from &ldquo;pl&rdquo; package and &ldquo;en&rdquo; package</li>
<li>Delete &ldquo;pl&rdquo; package</li>
<li>Commit changes</li>
</ol>


<p>And I would have to do this <strong>every single time</strong> I port the changes between language branches. It&rsquo;s a tedious and error-prone job, and git automatically (automagically?) does it for me. How cool is that? Mightily cool IMHO. Of course if I add some java files in one branch, I have to do move them to correct package in the other branch (hence the <code>--no-commit</code> switch in git command above), but most of the conflicts are caused by binary files.</p>

<p>It&rsquo;s also more common case than you might think, i.e. you don&rsquo;t have to write a dictionary supporting multiple languages to run into it. For example if you have a lite and full version of an app, you have exactly the same situation.</p>

<p>Right now my repository looks like this (or it would look like this if the git gui tools didn&rsquo;t suck, but that&rsquo;s another story):</p>

<p><img class="center" src="/images/4.png"></p>

<p>I can&rsquo;t imagine supporting such structure without automatic merges provided by git, because it tracks <strong>content</strong> instead of <strong>files</strong>. And that&rsquo;s the real killer feature that distinguishes git from other DVCS.</p>
]]></content>
  </entry>
  
</feed>
