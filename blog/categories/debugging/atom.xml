<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Debugging | Porcupine Programmer]]></title>
  <link href="http://chalup.github.io/blog/categories/debugging/atom.xml" rel="self"/>
  <link href="http://chalup.github.io/"/>
  <updated>2014-06-10T09:28:49+02:00</updated>
  <id>http://chalup.github.io/</id>
  <author>
    <name><![CDATA[Jerzy Chalupski]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android Protip: Remove Debug Logs From Release Builds With Proguard]]></title>
    <link href="http://chalup.github.io/blog/2012/10/17/android-protip-remove-debug-logs-from/"/>
    <updated>2012-10-17T22:59:00+02:00</updated>
    <id>http://chalup.github.io/blog/2012/10/17/android-protip-remove-debug-logs-from</id>
    <content type="html"><![CDATA[<p>I use the <code>android.util.Log</code> extensively &ndash; often it&rsquo;s faster than starting the debugger and (unlike debugging) it&rsquo;s always on, which is invaluable when you&rsquo;re trying to track the root cause of some hard to reproduce bugs. Logging is also nice for release candidate builds you give to the QA team &ndash; if they find some bugs you&rsquo;ll have more information than just a stack trace.</p>

<p>On the other hand you don&rsquo;t want to keep all those logs for release builds, mostly for performance and privacy reasons. If you google around for a solution to this issue you&rsquo;ll probably find a dozen ideas like using a wrapper for logging class, using a dedicated logging framework or even some sed/awk scripts to ant build process. Among those ideas is the one I&rsquo;d like to recommend: customizing <a href="http://developer.android.com/tools/help/proguard.html">Proguard</a> configuration.</p>

<p>Proguard is automatically run in release builds by ant and Export wizards from Eclipse and there is an <a href="http://proguard.sourceforge.net/index.html#manual/usage.html">optimization option</a>, which can be used to disable logs:</p>

<p><blockquote><p>-assumenosideeffects</p></p><p><p>Specifies methods that don&rsquo;t have any side effects (other than maybe returning a value). In the optimization step, ProGuard will then remove calls to such methods, if it can determine that the return values aren&rsquo;t used.</p></blockquote></p>

<p>I wouldn&rsquo;t use this tool for the purpose stated in the manual, because even if my code doesn&rsquo;t have any side effects, the methods called from it might have ones; I&rsquo;d rather use some static code analysis tool to find the unnecessary calls and manually remove them. It looks perfect for suppressing the logs though and it&rsquo;s very simple to set up &ndash; just add the following lines to the proguard-project.txt file generated by <a href="http://developer.android.com/tools/help/android.html">android command line tool</a>:</p>

<p>```
-assumenosideeffects class android.util.Log {</p>

<pre><code>public static *** d(...);
public static *** v(...);
public static *** i(...);
public static *** w(...);
public static *** e(...);
</code></pre>

<p>}
```</p>

<p>You can of course keep some of the priority levels by removing lines from this config.</p>

<p>The nice thing about this solution is that you have to set it only once and it will just work for all further release builds.</p>

<p><strong>UPDATE (August 2013):</strong> do not assume that Proguard will remove any code other than the methods listed in assumenosideeffects setting. See <a href="/blog/2013/08/20/proguard-gotcha">&ldquo;Proguard gotcha&rdquo;</a> post for more details.</p>
]]></content>
  </entry>
  
</feed>
